/*
 * SPDX-FileCopyrightText: 2016 Kasper B. Graversen <https://github.com/kbilsted>
 *                         2025 Robert Di Pardo <dipardo.r@gmail.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

using System;
using Npp.DotNet.Plugin.Scintilla;
using static Npp.DotNet.Plugin.Win32;

namespace Npp.DotNet.Plugin
{
    using Accessibility = Scintilla.Accessibility;
    using Colour = ColourAlpha;

    /// <summary>
    /// Primary interface to Notepad++/Scintilla.
    ///
    /// See https://www.scintilla.org/ScintillaDoc.html for further details.
    /// </summary>
    /// <remarks>
    /// If gateways are missing or incomplete, feel free to open a discussion at <see href="https://github.com/orgs/npp-dotnet/discussions"/>
    /// </remarks>
    public interface IScintillaGateway
    {
        int GetSelectionLength();
        void AppendTextAndMoveCursor(string text);
        void InsertTextAndMoveCursor(string text);
        void SelectCurrentLine();
        void ClearSelectionToCursor();

        /// <summary>
        /// Get the current line from the current position
        /// </summary>
        long GetCurrentLineNumber();

        /// <summary>
        /// Get the scroll information for the current Scintilla window.
        /// </summary>
        /// <param name="mask">Arguments for the scroll information such as tracking</param>
        /// <param name="scrollBar">Which scroll bar information are you looking for</param>
        /// <returns>A ScrollInfo struct with information of the current scroll state</returns>
        ScrollInfo GetScrollInfo(ScrollInfoMask mask = ScrollInfoMask.SIF_ALL, ScrollInfoBar scrollBar = ScrollInfoBar.SB_BOTH);

        /* ++Autogenerated -- start of section automatically generated from Scintilla.iface */
        /// <inheritdoc cref="ScintillaGateway.AddText"/>
        void AddText(string text);

        /// <inheritdoc cref="ScintillaGateway.AddStyledText"/>
        unsafe void AddStyledText(Position length, Cells c);

        /// <inheritdoc cref="ScintillaGateway.InsertText"/>
        void InsertText(Position pos, string text);

        /// <inheritdoc cref="ScintillaGateway.ChangeInsertion"/>
        void ChangeInsertion(string text);

        /// <inheritdoc cref="ScintillaGateway.ClearAll"/>
        void ClearAll();

        /// <inheritdoc cref="ScintillaGateway.DeleteRange"/>
        void DeleteRange(Position start, Position lengthDelete);

        /// <inheritdoc cref="ScintillaGateway.ClearDocumentStyle"/>
        void ClearDocumentStyle();

        /// <inheritdoc cref="ScintillaGateway.GetLength"/>
        Position GetLength();

        /// <inheritdoc cref="ScintillaGateway.GetCharAt"/>
        int GetCharAt(Position pos);

        /// <inheritdoc cref="ScintillaGateway.GetCurrentPos"/>
        Position GetCurrentPos();

        /// <inheritdoc cref="ScintillaGateway.GetAnchor"/>
        Position GetAnchor();

        /// <inheritdoc cref="ScintillaGateway.GetStyleAt"/>
        int GetStyleAt(Position pos);

        /// <inheritdoc cref="ScintillaGateway.GetStyleIndexAt"/>
        int GetStyleIndexAt(Position pos);

        /// <inheritdoc cref="ScintillaGateway.Redo"/>
        void Redo();

        /// <inheritdoc cref="ScintillaGateway.SetUndoCollection"/>
        void SetUndoCollection(bool collectUndo);

        /// <inheritdoc cref="ScintillaGateway.SelectAll"/>
        void SelectAll();

        /// <inheritdoc cref="ScintillaGateway.SetSavePoint"/>
        void SetSavePoint();

        /// <inheritdoc cref="ScintillaGateway.GetStyledTextFull"/>
        Position GetStyledTextFull(TextRangeFull tr);

        /// <inheritdoc cref="ScintillaGateway.CanRedo"/>
        bool CanRedo();

        /// <inheritdoc cref="ScintillaGateway.MarkerLineFromHandle"/>
        Position MarkerLineFromHandle(int markerHandle);

        /// <inheritdoc cref="ScintillaGateway.MarkerDeleteHandle"/>
        void MarkerDeleteHandle(int markerHandle);

        /// <inheritdoc cref="ScintillaGateway.MarkerHandleFromLine"/>
        int MarkerHandleFromLine(Position line, int which);

        /// <inheritdoc cref="ScintillaGateway.MarkerNumberFromLine"/>
        int MarkerNumberFromLine(Position line, int which);

        /// <inheritdoc cref="ScintillaGateway.GetUndoCollection"/>
        bool GetUndoCollection();

        /// <inheritdoc cref="ScintillaGateway.GetViewWS"/>
        WhiteSpace GetViewWS();

        /// <inheritdoc cref="ScintillaGateway.SetViewWS"/>
        void SetViewWS(WhiteSpace viewWS);

        /// <inheritdoc cref="ScintillaGateway.GetTabDrawMode"/>
        TabDrawMode GetTabDrawMode();

        /// <inheritdoc cref="ScintillaGateway.SetTabDrawMode"/>
        void SetTabDrawMode(TabDrawMode tabDrawMode);

        /// <inheritdoc cref="ScintillaGateway.PositionFromPoint"/>
        Position PositionFromPoint(int x, int y);

        /// <inheritdoc cref="ScintillaGateway.PositionFromPointClose"/>
        Position PositionFromPointClose(int x, int y);

        /// <inheritdoc cref="ScintillaGateway.GotoLine"/>
        void GotoLine(Position line);

        /// <inheritdoc cref="ScintillaGateway.GotoPos"/>
        void GotoPos(Position caret);

        /// <inheritdoc cref="ScintillaGateway.SetAnchor"/>
        void SetAnchor(Position anchor);

        /// <inheritdoc cref="ScintillaGateway.GetCurLine"/>
        string GetCurLine();

        /// <inheritdoc cref="ScintillaGateway.GetEndStyled"/>
        Position GetEndStyled();

        /// <inheritdoc cref="ScintillaGateway.ConvertEOLs"/>
        void ConvertEOLs(EndOfLine eolMode);

        /// <inheritdoc cref="ScintillaGateway.GetEOLMode"/>
        EndOfLine GetEOLMode();

        /// <inheritdoc cref="ScintillaGateway.SetEOLMode"/>
        void SetEOLMode(EndOfLine eolMode);

        /// <inheritdoc cref="ScintillaGateway.StartStyling"/>
        void StartStyling(Position start, int unused);

        /// <inheritdoc cref="ScintillaGateway.SetStyling"/>
        void SetStyling(Position length, int style);

        /// <inheritdoc cref="ScintillaGateway.GetBufferedDraw"/>
        bool GetBufferedDraw();

        /// <inheritdoc cref="ScintillaGateway.SetBufferedDraw"/>
        void SetBufferedDraw(bool buffered);

        /// <inheritdoc cref="ScintillaGateway.SetTabWidth"/>
        void SetTabWidth(int tabWidth);

        /// <inheritdoc cref="ScintillaGateway.GetTabWidth"/>
        int GetTabWidth();

        /// <inheritdoc cref="ScintillaGateway.SetTabMinimumWidth"/>
        void SetTabMinimumWidth(int pixels);

        /// <inheritdoc cref="ScintillaGateway.GetTabMinimumWidth"/>
        int GetTabMinimumWidth();

        /// <inheritdoc cref="ScintillaGateway.ClearTabStops"/>
        void ClearTabStops(Position line);

        /// <inheritdoc cref="ScintillaGateway.AddTabStop"/>
        void AddTabStop(Position line, int x);

        /// <inheritdoc cref="ScintillaGateway.GetNextTabStop"/>
        int GetNextTabStop(Position line, int x);

        /// <inheritdoc cref="ScintillaGateway.SetCodePage"/>
        void SetCodePage(int codePage);

        /// <inheritdoc cref="ScintillaGateway.SetFontLocale"/>
        void SetFontLocale(string localeName);

        /// <inheritdoc cref="ScintillaGateway.GetFontLocale"/>
        string GetFontLocale();

        /// <inheritdoc cref="ScintillaGateway.GetIMEInteraction"/>
        IMEInteraction GetIMEInteraction();

        /// <inheritdoc cref="ScintillaGateway.SetIMEInteraction"/>
        void SetIMEInteraction(IMEInteraction imeInteraction);

        /// <inheritdoc cref="ScintillaGateway.MarkerDefine"/>
        void MarkerDefine(int markerNumber, MarkerSymbol markerSymbol);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetFore"/>
        void MarkerSetFore(int markerNumber, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetBack"/>
        void MarkerSetBack(int markerNumber, Colour back);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetBackSelected"/>
        void MarkerSetBackSelected(int markerNumber, Colour back);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetForeTranslucent"/>
        void MarkerSetForeTranslucent(int markerNumber, ColourAlpha fore);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetBackTranslucent"/>
        void MarkerSetBackTranslucent(int markerNumber, ColourAlpha back);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetBackSelectedTranslucent"/>
        void MarkerSetBackSelectedTranslucent(int markerNumber, ColourAlpha back);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetStrokeWidth"/>
        void MarkerSetStrokeWidth(int markerNumber, int hundredths);

        /// <inheritdoc cref="ScintillaGateway.MarkerEnableHighlight"/>
        void MarkerEnableHighlight(bool enabled);

        /// <inheritdoc cref="ScintillaGateway.MarkerAdd"/>
        int MarkerAdd(Position line, int markerNumber);

        /// <inheritdoc cref="ScintillaGateway.MarkerDelete"/>
        void MarkerDelete(Position line, int markerNumber);

        /// <inheritdoc cref="ScintillaGateway.MarkerDeleteAll"/>
        void MarkerDeleteAll(int markerNumber);

        /// <inheritdoc cref="ScintillaGateway.MarkerGet"/>
        int MarkerGet(Position line);

        /// <inheritdoc cref="ScintillaGateway.MarkerNext"/>
        Position MarkerNext(Position lineStart, int markerMask);

        /// <inheritdoc cref="ScintillaGateway.MarkerPrevious"/>
        Position MarkerPrevious(Position lineStart, int markerMask);

        /// <inheritdoc cref="ScintillaGateway.MarkerDefinePixmap"/>
        void MarkerDefinePixmap(int markerNumber, string pixmap);

        /// <inheritdoc cref="ScintillaGateway.MarkerAddSet"/>
        void MarkerAddSet(Position line, int markerSet);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetAlpha"/>
        void MarkerSetAlpha(int markerNumber, Alpha alpha);

        /// <inheritdoc cref="ScintillaGateway.MarkerGetLayer"/>
        Layer MarkerGetLayer(int markerNumber);

        /// <inheritdoc cref="ScintillaGateway.MarkerSetLayer"/>
        void MarkerSetLayer(int markerNumber, Layer layer);

        /// <inheritdoc cref="ScintillaGateway.SetMarginTypeN"/>
        void SetMarginTypeN(int margin, MarginType marginType);

        /// <inheritdoc cref="ScintillaGateway.GetMarginTypeN"/>
        MarginType GetMarginTypeN(int margin);

        /// <inheritdoc cref="ScintillaGateway.SetMarginWidthN"/>
        void SetMarginWidthN(int margin, int pixelWidth);

        /// <inheritdoc cref="ScintillaGateway.GetMarginWidthN"/>
        int GetMarginWidthN(int margin);

        /// <inheritdoc cref="ScintillaGateway.SetMarginMaskN"/>
        void SetMarginMaskN(int margin, int mask);

        /// <inheritdoc cref="ScintillaGateway.GetMarginMaskN"/>
        int GetMarginMaskN(int margin);

        /// <inheritdoc cref="ScintillaGateway.SetMarginSensitiveN"/>
        void SetMarginSensitiveN(int margin, bool sensitive);

        /// <inheritdoc cref="ScintillaGateway.GetMarginSensitiveN"/>
        bool GetMarginSensitiveN(int margin);

        /// <inheritdoc cref="ScintillaGateway.SetMarginCursorN"/>
        void SetMarginCursorN(int margin, CursorShape cursor);

        /// <inheritdoc cref="ScintillaGateway.GetMarginCursorN"/>
        CursorShape GetMarginCursorN(int margin);

        /// <inheritdoc cref="ScintillaGateway.SetMarginBackN"/>
        void SetMarginBackN(int margin, Colour back);

        /// <inheritdoc cref="ScintillaGateway.GetMarginBackN"/>
        Colour GetMarginBackN(int margin);

        /// <inheritdoc cref="ScintillaGateway.SetMargins"/>
        void SetMargins(int margins);

        /// <inheritdoc cref="ScintillaGateway.GetMargins"/>
        int GetMargins();

        /// <inheritdoc cref="ScintillaGateway.StyleClearAll"/>
        void StyleClearAll();

        /// <inheritdoc cref="ScintillaGateway.StyleSetFore"/>
        void StyleSetFore(int style, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.StyleSetBack"/>
        void StyleSetBack(int style, Colour back);

        /// <inheritdoc cref="ScintillaGateway.StyleSetBold"/>
        void StyleSetBold(int style, bool bold);

        /// <inheritdoc cref="ScintillaGateway.StyleSetItalic"/>
        void StyleSetItalic(int style, bool italic);

        /// <inheritdoc cref="ScintillaGateway.StyleSetSize"/>
        void StyleSetSize(int style, int sizePoints);

        /// <inheritdoc cref="ScintillaGateway.StyleSetFont"/>
        void StyleSetFont(int style, string fontName);

        /// <inheritdoc cref="ScintillaGateway.StyleSetEOLFilled"/>
        void StyleSetEOLFilled(int style, bool eolFilled);

        /// <inheritdoc cref="ScintillaGateway.StyleResetDefault"/>
        void StyleResetDefault();

        /// <inheritdoc cref="ScintillaGateway.StyleSetUnderline"/>
        void StyleSetUnderline(int style, bool underline);

        /// <inheritdoc cref="ScintillaGateway.StyleGetFore"/>
        Colour StyleGetFore(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetBack"/>
        Colour StyleGetBack(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetBold"/>
        bool StyleGetBold(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetItalic"/>
        bool StyleGetItalic(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetSize"/>
        int StyleGetSize(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetFont"/>
        string StyleGetFont(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetEOLFilled"/>
        bool StyleGetEOLFilled(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetUnderline"/>
        bool StyleGetUnderline(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetCase"/>
        CaseVisible StyleGetCase(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetCharacterSet"/>
        CharacterSet StyleGetCharacterSet(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetVisible"/>
        bool StyleGetVisible(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetChangeable"/>
        bool StyleGetChangeable(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleGetHotSpot"/>
        bool StyleGetHotSpot(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleSetCase"/>
        void StyleSetCase(int style, CaseVisible caseVisible);

        /// <inheritdoc cref="ScintillaGateway.StyleSetSizeFractional"/>
        void StyleSetSizeFractional(int style, int sizeHundredthPoints);

        /// <inheritdoc cref="ScintillaGateway.StyleGetSizeFractional"/>
        int StyleGetSizeFractional(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleSetWeight"/>
        void StyleSetWeight(int style, FontWeight weight);

        /// <inheritdoc cref="ScintillaGateway.StyleGetWeight"/>
        FontWeight StyleGetWeight(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleSetCharacterSet"/>
        void StyleSetCharacterSet(int style, CharacterSet characterSet);

        /// <inheritdoc cref="ScintillaGateway.StyleSetHotSpot"/>
        void StyleSetHotSpot(int style, bool hotspot);

        /// <inheritdoc cref="ScintillaGateway.StyleSetCheckMonospaced"/>
        void StyleSetCheckMonospaced(int style, bool checkMonospaced);

        /// <inheritdoc cref="ScintillaGateway.StyleGetCheckMonospaced"/>
        bool StyleGetCheckMonospaced(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleSetStretch"/>
        void StyleSetStretch(int style, FontStretch stretch);

        /// <inheritdoc cref="ScintillaGateway.StyleGetStretch"/>
        FontStretch StyleGetStretch(int style);

        /// <inheritdoc cref="ScintillaGateway.StyleSetInvisibleRepresentation"/>
        void StyleSetInvisibleRepresentation(int style, string representation);

        /// <inheritdoc cref="ScintillaGateway.StyleGetInvisibleRepresentation"/>
        string StyleGetInvisibleRepresentation(int style);

        /// <inheritdoc cref="ScintillaGateway.SetElementColour"/>
        void SetElementColour(Element element, ColourAlpha colourElement);

        /// <inheritdoc cref="ScintillaGateway.GetElementColour"/>
        ColourAlpha GetElementColour(Element element);

        /// <inheritdoc cref="ScintillaGateway.ResetElementColour"/>
        void ResetElementColour(Element element);

        /// <inheritdoc cref="ScintillaGateway.GetElementIsSet"/>
        bool GetElementIsSet(Element element);

        /// <inheritdoc cref="ScintillaGateway.GetElementAllowsTranslucent"/>
        bool GetElementAllowsTranslucent(Element element);

        /// <inheritdoc cref="ScintillaGateway.GetElementBaseColour"/>
        ColourAlpha GetElementBaseColour(Element element);

        /// <inheritdoc cref="ScintillaGateway.SetSelFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetSelFore(bool useSetting, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.SetSelBack"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetSelBack(bool useSetting, Colour back);

        /// <inheritdoc cref="ScintillaGateway.GetSelAlpha"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Alpha GetSelAlpha();

        /// <inheritdoc cref="ScintillaGateway.SetSelAlpha"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetSelAlpha(Alpha alpha);

        /// <inheritdoc cref="ScintillaGateway.GetSelEOLFilled"/>
        bool GetSelEOLFilled();

        /// <inheritdoc cref="ScintillaGateway.SetSelEOLFilled"/>
        void SetSelEOLFilled(bool filled);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionLayer"/>
        Layer GetSelectionLayer();

        /// <inheritdoc cref="ScintillaGateway.SetSelectionLayer"/>
        void SetSelectionLayer(Layer layer);

        /// <inheritdoc cref="ScintillaGateway.GetCaretLineLayer"/>
        Layer GetCaretLineLayer();

        /// <inheritdoc cref="ScintillaGateway.SetCaretLineLayer"/>
        void SetCaretLineLayer(Layer layer);

        /// <inheritdoc cref="ScintillaGateway.GetCaretLineHighlightSubLine"/>
        bool GetCaretLineHighlightSubLine();

        /// <inheritdoc cref="ScintillaGateway.SetCaretLineHighlightSubLine"/>
        void SetCaretLineHighlightSubLine(bool subLine);

        /// <inheritdoc cref="ScintillaGateway.SetCaretFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetCaretFore(Colour fore);

        /// <inheritdoc cref="ScintillaGateway.AssignCmdKey"/>
        void AssignCmdKey(KeyModifier keyDefinition, int sciCommand);

        /// <inheritdoc cref="ScintillaGateway.ClearCmdKey"/>
        void ClearCmdKey(KeyModifier keyDefinition);

        /// <inheritdoc cref="ScintillaGateway.ClearAllCmdKeys"/>
        void ClearAllCmdKeys();

        /// <inheritdoc cref="ScintillaGateway.SetStylingEx"/>
        void SetStylingEx(Position length, string styles);

        /// <inheritdoc cref="ScintillaGateway.StyleSetVisible"/>
        void StyleSetVisible(int style, bool visible);

        /// <inheritdoc cref="ScintillaGateway.GetCaretPeriod"/>
        int GetCaretPeriod();

        /// <inheritdoc cref="ScintillaGateway.SetCaretPeriod"/>
        void SetCaretPeriod(int periodMilliseconds);

        /// <inheritdoc cref="ScintillaGateway.SetWordChars"/>
        void SetWordChars(string characters);

        /// <inheritdoc cref="ScintillaGateway.GetWordChars"/>
        string GetWordChars();

        /// <inheritdoc cref="ScintillaGateway.SetCharacterCategoryOptimization"/>
        void SetCharacterCategoryOptimization(int countCharacters);

        /// <inheritdoc cref="ScintillaGateway.GetCharacterCategoryOptimization"/>
        int GetCharacterCategoryOptimization();

        /// <inheritdoc cref="ScintillaGateway.BeginUndoAction"/>
        void BeginUndoAction();

        /// <inheritdoc cref="ScintillaGateway.EndUndoAction"/>
        void EndUndoAction();

        /// <inheritdoc cref="ScintillaGateway.GetUndoSequence"/>
        int GetUndoSequence();

        /// <inheritdoc cref="ScintillaGateway.GetUndoActions"/>
        int GetUndoActions();

        /// <inheritdoc cref="ScintillaGateway.SetUndoSavePoint"/>
        void SetUndoSavePoint(int action);

        /// <inheritdoc cref="ScintillaGateway.GetUndoSavePoint"/>
        int GetUndoSavePoint();

        /// <inheritdoc cref="ScintillaGateway.SetUndoDetach"/>
        void SetUndoDetach(int action);

        /// <inheritdoc cref="ScintillaGateway.GetUndoDetach"/>
        int GetUndoDetach();

        /// <inheritdoc cref="ScintillaGateway.SetUndoTentative"/>
        void SetUndoTentative(int action);

        /// <inheritdoc cref="ScintillaGateway.GetUndoTentative"/>
        int GetUndoTentative();

        /// <inheritdoc cref="ScintillaGateway.SetUndoCurrent"/>
        void SetUndoCurrent(int action);

        /// <inheritdoc cref="ScintillaGateway.GetUndoCurrent"/>
        int GetUndoCurrent();

        /// <inheritdoc cref="ScintillaGateway.PushUndoActionType"/>
        void PushUndoActionType(int type, Position pos);

        /// <inheritdoc cref="ScintillaGateway.ChangeLastUndoActionText"/>
        void ChangeLastUndoActionText(string text);

        /// <inheritdoc cref="ScintillaGateway.GetUndoActionType"/>
        int GetUndoActionType(int action);

        /// <inheritdoc cref="ScintillaGateway.GetUndoActionPosition"/>
        Position GetUndoActionPosition(int action);

        /// <inheritdoc cref="ScintillaGateway.GetUndoActionText"/>
        string GetUndoActionText(int action);

        /// <inheritdoc cref="ScintillaGateway.IndicSetStyle"/>
        void IndicSetStyle(int indicator, IndicatorStyle indicatorStyle);

        /// <inheritdoc cref="ScintillaGateway.IndicGetStyle"/>
        IndicatorStyle IndicGetStyle(int indicator);

        /// <inheritdoc cref="ScintillaGateway.IndicSetFore"/>
        void IndicSetFore(int indicator, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.IndicGetFore"/>
        Colour IndicGetFore(int indicator);

        /// <inheritdoc cref="ScintillaGateway.IndicSetUnder"/>
        void IndicSetUnder(int indicator, bool under);

        /// <inheritdoc cref="ScintillaGateway.IndicGetUnder"/>
        bool IndicGetUnder(int indicator);

        /// <inheritdoc cref="ScintillaGateway.IndicSetHoverStyle"/>
        void IndicSetHoverStyle(int indicator, IndicatorStyle indicatorStyle);

        /// <inheritdoc cref="ScintillaGateway.IndicGetHoverStyle"/>
        IndicatorStyle IndicGetHoverStyle(int indicator);

        /// <inheritdoc cref="ScintillaGateway.IndicSetHoverFore"/>
        void IndicSetHoverFore(int indicator, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.IndicGetHoverFore"/>
        Colour IndicGetHoverFore(int indicator);

        /// <inheritdoc cref="ScintillaGateway.IndicSetFlags"/>
        void IndicSetFlags(int indicator, IndicFlag flags);

        /// <inheritdoc cref="ScintillaGateway.IndicGetFlags"/>
        IndicFlag IndicGetFlags(int indicator);

        /// <inheritdoc cref="ScintillaGateway.IndicSetStrokeWidth"/>
        void IndicSetStrokeWidth(int indicator, int hundredths);

        /// <inheritdoc cref="ScintillaGateway.IndicGetStrokeWidth"/>
        int IndicGetStrokeWidth(int indicator);

        /// <inheritdoc cref="ScintillaGateway.SetWhitespaceFore"/>
        void SetWhitespaceFore(bool useSetting, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.SetWhitespaceBack"/>
        void SetWhitespaceBack(bool useSetting, Colour back);

        /// <inheritdoc cref="ScintillaGateway.SetWhitespaceSize"/>
        void SetWhitespaceSize(int size);

        /// <inheritdoc cref="ScintillaGateway.GetWhitespaceSize"/>
        int GetWhitespaceSize();

        /// <inheritdoc cref="ScintillaGateway.SetLineState"/>
        void SetLineState(Position line, int state);

        /// <inheritdoc cref="ScintillaGateway.GetLineState"/>
        int GetLineState(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetMaxLineState"/>
        int GetMaxLineState();

        /// <inheritdoc cref="ScintillaGateway.GetCaretLineVisible"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        bool GetCaretLineVisible();

        /// <inheritdoc cref="ScintillaGateway.SetCaretLineVisible"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetCaretLineVisible(bool show);

        /// <inheritdoc cref="ScintillaGateway.GetCaretLineBack"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Colour GetCaretLineBack();

        /// <inheritdoc cref="ScintillaGateway.SetCaretLineBack"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetCaretLineBack(Colour back);

        /// <inheritdoc cref="ScintillaGateway.GetCaretLineFrame"/>
        int GetCaretLineFrame();

        /// <inheritdoc cref="ScintillaGateway.SetCaretLineFrame"/>
        void SetCaretLineFrame(int width);

        /// <inheritdoc cref="ScintillaGateway.StyleSetChangeable"/>
        void StyleSetChangeable(int style, bool changeable);

        /// <inheritdoc cref="ScintillaGateway.AutoCShow"/>
        void AutoCShow(Position lengthEntered, string itemList);

        /// <inheritdoc cref="ScintillaGateway.AutoCCancel"/>
        void AutoCCancel();

        /// <inheritdoc cref="ScintillaGateway.AutoCActive"/>
        bool AutoCActive();

        /// <inheritdoc cref="ScintillaGateway.AutoCPosStart"/>
        Position AutoCPosStart();

        /// <inheritdoc cref="ScintillaGateway.AutoCComplete"/>
        void AutoCComplete();

        /// <inheritdoc cref="ScintillaGateway.AutoCStops"/>
        void AutoCStops(string characterSet);

        /// <inheritdoc cref="ScintillaGateway.AutoCSetSeparator"/>
        void AutoCSetSeparator(int separatorCharacter);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetSeparator"/>
        int AutoCGetSeparator();

        /// <inheritdoc cref="ScintillaGateway.AutoCSelect"/>
        void AutoCSelect(string select);

        /// <inheritdoc cref="ScintillaGateway.AutoCSetCancelAtStart"/>
        void AutoCSetCancelAtStart(bool cancel);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetCancelAtStart"/>
        bool AutoCGetCancelAtStart();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetFillUps"/>
        void AutoCSetFillUps(string characterSet);

        /// <inheritdoc cref="ScintillaGateway.AutoCSetChooseSingle"/>
        void AutoCSetChooseSingle(bool chooseSingle);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetChooseSingle"/>
        bool AutoCGetChooseSingle();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetIgnoreCase"/>
        void AutoCSetIgnoreCase(bool ignoreCase);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetIgnoreCase"/>
        bool AutoCGetIgnoreCase();

        /// <inheritdoc cref="ScintillaGateway.UserListShow"/>
        void UserListShow(int listType, string itemList);

        /// <inheritdoc cref="ScintillaGateway.AutoCSetAutoHide"/>
        void AutoCSetAutoHide(bool autoHide);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetAutoHide"/>
        bool AutoCGetAutoHide();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetOptions"/>
        void AutoCSetOptions(AutoCompleteOption options);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetOptions"/>
        AutoCompleteOption AutoCGetOptions();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetDropRestOfWord"/>
        void AutoCSetDropRestOfWord(bool dropRestOfWord);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetDropRestOfWord"/>
        bool AutoCGetDropRestOfWord();

        /// <inheritdoc cref="ScintillaGateway.RegisterImage"/>
        void RegisterImage(int type, string xpmData);

        /// <inheritdoc cref="ScintillaGateway.ClearRegisteredImages"/>
        void ClearRegisteredImages();

        /// <inheritdoc cref="ScintillaGateway.AutoCGetTypeSeparator"/>
        int AutoCGetTypeSeparator();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetTypeSeparator"/>
        void AutoCSetTypeSeparator(int separatorCharacter);

        /// <inheritdoc cref="ScintillaGateway.AutoCSetMaxWidth"/>
        void AutoCSetMaxWidth(int characterCount);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetMaxWidth"/>
        int AutoCGetMaxWidth();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetMaxHeight"/>
        void AutoCSetMaxHeight(int rowCount);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetMaxHeight"/>
        int AutoCGetMaxHeight();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetStyle"/>
        void AutoCSetStyle(int style);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetStyle"/>
        int AutoCGetStyle();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetImageScale"/>
        void AutoCSetImageScale(int scalePercent);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetImageScale"/>
        int AutoCGetImageScale();

        /// <inheritdoc cref="ScintillaGateway.SetIndent"/>
        void SetIndent(int indentSize);

        /// <inheritdoc cref="ScintillaGateway.GetIndent"/>
        int GetIndent();

        /// <inheritdoc cref="ScintillaGateway.SetUseTabs"/>
        void SetUseTabs(bool useTabs);

        /// <inheritdoc cref="ScintillaGateway.GetUseTabs"/>
        bool GetUseTabs();

        /// <inheritdoc cref="ScintillaGateway.SetLineIndentation"/>
        void SetLineIndentation(Position line, int indentation);

        /// <inheritdoc cref="ScintillaGateway.GetLineIndentation"/>
        int GetLineIndentation(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetLineIndentPosition"/>
        Position GetLineIndentPosition(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetColumn"/>
        Position GetColumn(Position pos);

        /// <inheritdoc cref="ScintillaGateway.CountCharacters"/>
        Position CountCharacters(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.CountCodeUnits"/>
        Position CountCodeUnits(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.SetHScrollBar"/>
        void SetHScrollBar(bool visible);

        /// <inheritdoc cref="ScintillaGateway.GetHScrollBar"/>
        bool GetHScrollBar();

        /// <inheritdoc cref="ScintillaGateway.SetIndentationGuides"/>
        void SetIndentationGuides(IndentView indentView);

        /// <inheritdoc cref="ScintillaGateway.GetIndentationGuides"/>
        IndentView GetIndentationGuides();

        /// <inheritdoc cref="ScintillaGateway.SetHighlightGuide"/>
        void SetHighlightGuide(Position column);

        /// <inheritdoc cref="ScintillaGateway.GetHighlightGuide"/>
        Position GetHighlightGuide();

        /// <inheritdoc cref="ScintillaGateway.GetLineEndPosition"/>
        Position GetLineEndPosition(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetCodePage"/>
        int GetCodePage();

        /// <inheritdoc cref="ScintillaGateway.GetCaretFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Colour GetCaretFore();

        /// <inheritdoc cref="ScintillaGateway.GetReadOnly"/>
        bool GetReadOnly();

        /// <inheritdoc cref="ScintillaGateway.SetCurrentPos"/>
        void SetCurrentPos(Position caret);

        /// <inheritdoc cref="ScintillaGateway.SetSelectionStart"/>
        void SetSelectionStart(Position anchor);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionStart"/>
        Position GetSelectionStart();

        /// <inheritdoc cref="ScintillaGateway.SetSelectionEnd"/>
        void SetSelectionEnd(Position caret);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionEnd"/>
        Position GetSelectionEnd();

        /// <inheritdoc cref="ScintillaGateway.SetEmptySelection"/>
        void SetEmptySelection(Position caret);

        /// <inheritdoc cref="ScintillaGateway.SetPrintMagnification"/>
        void SetPrintMagnification(int magnification);

        /// <inheritdoc cref="ScintillaGateway.GetPrintMagnification"/>
        int GetPrintMagnification();

        /// <inheritdoc cref="ScintillaGateway.SetPrintColourMode"/>
        void SetPrintColourMode(PrintOption mode);

        /// <inheritdoc cref="ScintillaGateway.GetPrintColourMode"/>
        PrintOption GetPrintColourMode();

        /// <inheritdoc cref="ScintillaGateway.FindTextFull"/>
        Position FindTextFull(FindOption searchFlags, TextToFindFull ft);

        /// <inheritdoc cref="ScintillaGateway.SetChangeHistory"/>
        void SetChangeHistory(ChangeHistoryOption changeHistory);

        /// <inheritdoc cref="ScintillaGateway.GetChangeHistory"/>
        ChangeHistoryOption GetChangeHistory();

        /// <inheritdoc cref="ScintillaGateway.SetUndoSelectionHistory"/>
        void SetUndoSelectionHistory(UndoSelectionHistoryOption undoSelectionHistory);

        /// <inheritdoc cref="ScintillaGateway.GetUndoSelectionHistory"/>
        UndoSelectionHistoryOption GetUndoSelectionHistory();

        /// <inheritdoc cref="ScintillaGateway.SetSelectionSerialized"/>
        void SetSelectionSerialized(string selectionString);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionSerialized"/>
        string GetSelectionSerialized();

        /// <inheritdoc cref="ScintillaGateway.GetFirstVisibleLine"/>
        Position GetFirstVisibleLine();

        /// <inheritdoc cref="ScintillaGateway.GetLine"/>
        string GetLine(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetLineCount"/>
        Position GetLineCount();

        /// <inheritdoc cref="ScintillaGateway.AllocateLines"/>
        void AllocateLines(Position lines);

        /// <inheritdoc cref="ScintillaGateway.SetMarginLeft"/>
        void SetMarginLeft(int pixelWidth);

        /// <inheritdoc cref="ScintillaGateway.GetMarginLeft"/>
        int GetMarginLeft();

        /// <inheritdoc cref="ScintillaGateway.SetMarginRight"/>
        void SetMarginRight(int pixelWidth);

        /// <inheritdoc cref="ScintillaGateway.GetMarginRight"/>
        int GetMarginRight();

        /// <inheritdoc cref="ScintillaGateway.GetModify"/>
        bool GetModify();

        /// <inheritdoc cref="ScintillaGateway.SetSel"/>
        void SetSel(Position anchor, Position caret);

        /// <inheritdoc cref="ScintillaGateway.GetSelText"/>
        string GetSelText();

        /// <inheritdoc cref="ScintillaGateway.GetTextRangeFull"/>
        Position GetTextRangeFull(TextRangeFull tr);

        /// <inheritdoc cref="ScintillaGateway.HideSelection"/>
        void HideSelection(bool hide);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionHidden"/>
        bool GetSelectionHidden();

        /// <inheritdoc cref="ScintillaGateway.PointXFromPosition"/>
        int PointXFromPosition(Position pos);

        /// <inheritdoc cref="ScintillaGateway.PointYFromPosition"/>
        int PointYFromPosition(Position pos);

        /// <inheritdoc cref="ScintillaGateway.LineFromPosition"/>
        Position LineFromPosition(Position pos);

        /// <inheritdoc cref="ScintillaGateway.PositionFromLine"/>
        Position PositionFromLine(Position line);

        /// <inheritdoc cref="ScintillaGateway.LineScroll"/>
        void LineScroll(Position columns, Position lines);

        /// <inheritdoc cref="ScintillaGateway.ScrollVertical"/>
        void ScrollVertical(Position docLine, Position subLine);

        /// <inheritdoc cref="ScintillaGateway.ScrollCaret"/>
        void ScrollCaret();

        /// <inheritdoc cref="ScintillaGateway.ScrollRange"/>
        void ScrollRange(Position secondary, Position primary);

        /// <inheritdoc cref="ScintillaGateway.ReplaceSel"/>
        void ReplaceSel(string text);

        /// <inheritdoc cref="ScintillaGateway.SetReadOnly"/>
        void SetReadOnly(bool readOnly);

        /// <inheritdoc cref="ScintillaGateway.Null"/>
        void Null();

        /// <inheritdoc cref="ScintillaGateway.CanPaste"/>
        bool CanPaste();

        /// <inheritdoc cref="ScintillaGateway.CanUndo"/>
        bool CanUndo();

        /// <inheritdoc cref="ScintillaGateway.EmptyUndoBuffer"/>
        void EmptyUndoBuffer();

        /// <inheritdoc cref="ScintillaGateway.Undo"/>
        void Undo();

        /// <inheritdoc cref="ScintillaGateway.Cut"/>
        void Cut();

        /// <inheritdoc cref="ScintillaGateway.Copy"/>
        void Copy();

        /// <inheritdoc cref="ScintillaGateway.Paste"/>
        void Paste();

        /// <inheritdoc cref="ScintillaGateway.Clear"/>
        void Clear();

        /// <inheritdoc cref="ScintillaGateway.SetText"/>
        void SetText(string text);

        /// <inheritdoc cref="ScintillaGateway.GetText"/>
        string GetText();

        /// <inheritdoc cref="ScintillaGateway.GetTextLength"/>
        Position GetTextLength();

        /// <inheritdoc cref="ScintillaGateway.GetDirectFunction"/>
        IntPtr GetDirectFunction();

        /// <inheritdoc cref="ScintillaGateway.GetDirectStatusFunction"/>
        IntPtr GetDirectStatusFunction();

        /// <inheritdoc cref="ScintillaGateway.GetDirectPointer"/>
        IntPtr GetDirectPointer();

        /// <inheritdoc cref="ScintillaGateway.SetOvertype"/>
        void SetOvertype(bool overType);

        /// <inheritdoc cref="ScintillaGateway.GetOvertype"/>
        bool GetOvertype();

        /// <inheritdoc cref="ScintillaGateway.SetCaretWidth"/>
        void SetCaretWidth(int pixelWidth);

        /// <inheritdoc cref="ScintillaGateway.GetCaretWidth"/>
        int GetCaretWidth();

        /// <inheritdoc cref="ScintillaGateway.SetTargetStart"/>
        void SetTargetStart(Position start);

        /// <inheritdoc cref="ScintillaGateway.GetTargetStart"/>
        Position GetTargetStart();

        /// <inheritdoc cref="ScintillaGateway.SetTargetStartVirtualSpace"/>
        void SetTargetStartVirtualSpace(Position space);

        /// <inheritdoc cref="ScintillaGateway.GetTargetStartVirtualSpace"/>
        Position GetTargetStartVirtualSpace();

        /// <inheritdoc cref="ScintillaGateway.SetTargetEnd"/>
        void SetTargetEnd(Position end);

        /// <inheritdoc cref="ScintillaGateway.GetTargetEnd"/>
        Position GetTargetEnd();

        /// <inheritdoc cref="ScintillaGateway.SetTargetEndVirtualSpace"/>
        void SetTargetEndVirtualSpace(Position space);

        /// <inheritdoc cref="ScintillaGateway.GetTargetEndVirtualSpace"/>
        Position GetTargetEndVirtualSpace();

        /// <inheritdoc cref="ScintillaGateway.SetTargetRange"/>
        void SetTargetRange(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.GetTargetText"/>
        string GetTargetText();

        /// <inheritdoc cref="ScintillaGateway.TargetFromSelection"/>
        void TargetFromSelection();

        /// <inheritdoc cref="ScintillaGateway.TargetWholeDocument"/>
        void TargetWholeDocument();

        /// <inheritdoc cref="ScintillaGateway.ReplaceTarget"/>
        Position ReplaceTarget(string text);

        /// <inheritdoc cref="ScintillaGateway.ReplaceTargetRE"/>
        Position ReplaceTargetRE(string text);

        /// <inheritdoc cref="ScintillaGateway.ReplaceTargetMinimal"/>
        Position ReplaceTargetMinimal(string text);

        /// <inheritdoc cref="ScintillaGateway.SearchInTarget"/>
        Position SearchInTarget(string text);

        /// <inheritdoc cref="ScintillaGateway.SetSearchFlags"/>
        void SetSearchFlags(FindOption searchFlags);

        /// <inheritdoc cref="ScintillaGateway.GetSearchFlags"/>
        FindOption GetSearchFlags();

        /// <inheritdoc cref="ScintillaGateway.CallTipShow"/>
        void CallTipShow(Position pos, string definition);

        /// <inheritdoc cref="ScintillaGateway.CallTipCancel"/>
        void CallTipCancel();

        /// <inheritdoc cref="ScintillaGateway.CallTipActive"/>
        bool CallTipActive();

        /// <inheritdoc cref="ScintillaGateway.CallTipPosStart"/>
        Position CallTipPosStart();

        /// <inheritdoc cref="ScintillaGateway.CallTipSetPosStart"/>
        void CallTipSetPosStart(Position posStart);

        /// <inheritdoc cref="ScintillaGateway.CallTipSetHlt"/>
        void CallTipSetHlt(Position highlightStart, Position highlightEnd);

        /// <inheritdoc cref="ScintillaGateway.CallTipSetBack"/>
        void CallTipSetBack(Colour back);

        /// <inheritdoc cref="ScintillaGateway.CallTipSetFore"/>
        void CallTipSetFore(Colour fore);

        /// <inheritdoc cref="ScintillaGateway.CallTipSetForeHlt"/>
        void CallTipSetForeHlt(Colour fore);

        /// <inheritdoc cref="ScintillaGateway.CallTipUseStyle"/>
        void CallTipUseStyle(int tabSize);

        /// <inheritdoc cref="ScintillaGateway.CallTipSetPosition"/>
        void CallTipSetPosition(bool above);

        /// <inheritdoc cref="ScintillaGateway.VisibleFromDocLine"/>
        Position VisibleFromDocLine(Position docLine);

        /// <inheritdoc cref="ScintillaGateway.DocLineFromVisible"/>
        Position DocLineFromVisible(Position displayLine);

        /// <inheritdoc cref="ScintillaGateway.WrapCount"/>
        Position WrapCount(Position docLine);

        /// <inheritdoc cref="ScintillaGateway.SetFoldLevel"/>
        void SetFoldLevel(Position line, FoldLevel level);

        /// <inheritdoc cref="ScintillaGateway.GetFoldLevel"/>
        FoldLevel GetFoldLevel(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetLastChild"/>
        Position GetLastChild(Position line, FoldLevel level);

        /// <inheritdoc cref="ScintillaGateway.GetFoldParent"/>
        Position GetFoldParent(Position line);

        /// <inheritdoc cref="ScintillaGateway.ShowLines"/>
        void ShowLines(Position lineStart, Position lineEnd);

        /// <inheritdoc cref="ScintillaGateway.HideLines"/>
        void HideLines(Position lineStart, Position lineEnd);

        /// <inheritdoc cref="ScintillaGateway.GetLineVisible"/>
        bool GetLineVisible(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetAllLinesVisible"/>
        bool GetAllLinesVisible();

        /// <inheritdoc cref="ScintillaGateway.SetFoldExpanded"/>
        void SetFoldExpanded(Position line, bool expanded);

        /// <inheritdoc cref="ScintillaGateway.GetFoldExpanded"/>
        bool GetFoldExpanded(Position line);

        /// <inheritdoc cref="ScintillaGateway.ToggleFold"/>
        void ToggleFold(Position line);

        /// <inheritdoc cref="ScintillaGateway.ToggleFoldShowText"/>
        void ToggleFoldShowText(Position line, string text);

        /// <inheritdoc cref="ScintillaGateway.FoldDisplayTextSetStyle"/>
        void FoldDisplayTextSetStyle(FoldDisplayTextStyle style);

        /// <inheritdoc cref="ScintillaGateway.FoldDisplayTextGetStyle"/>
        FoldDisplayTextStyle FoldDisplayTextGetStyle();

        /// <inheritdoc cref="ScintillaGateway.SetDefaultFoldDisplayText"/>
        void SetDefaultFoldDisplayText(string text);

        /// <inheritdoc cref="ScintillaGateway.GetDefaultFoldDisplayText"/>
        string GetDefaultFoldDisplayText();

        /// <inheritdoc cref="ScintillaGateway.FoldLine"/>
        void FoldLine(Position line, FoldAction action);

        /// <inheritdoc cref="ScintillaGateway.FoldChildren"/>
        void FoldChildren(Position line, FoldAction action);

        /// <inheritdoc cref="ScintillaGateway.ExpandChildren"/>
        void ExpandChildren(Position line, FoldLevel level);

        /// <inheritdoc cref="ScintillaGateway.FoldAll"/>
        void FoldAll(FoldAction action);

        /// <inheritdoc cref="ScintillaGateway.EnsureVisible"/>
        void EnsureVisible(Position line);

        /// <inheritdoc cref="ScintillaGateway.SetAutomaticFold"/>
        void SetAutomaticFold(AutomaticFold automaticFold);

        /// <inheritdoc cref="ScintillaGateway.GetAutomaticFold"/>
        AutomaticFold GetAutomaticFold();

        /// <inheritdoc cref="ScintillaGateway.SetFoldFlags"/>
        void SetFoldFlags(FoldFlag flags);

        /// <inheritdoc cref="ScintillaGateway.EnsureVisibleEnforcePolicy"/>
        void EnsureVisibleEnforcePolicy(Position line);

        /// <inheritdoc cref="ScintillaGateway.SetTabIndents"/>
        void SetTabIndents(bool tabIndents);

        /// <inheritdoc cref="ScintillaGateway.GetTabIndents"/>
        bool GetTabIndents();

        /// <inheritdoc cref="ScintillaGateway.SetBackSpaceUnIndents"/>
        void SetBackSpaceUnIndents(bool bsUnIndents);

        /// <inheritdoc cref="ScintillaGateway.GetBackSpaceUnIndents"/>
        bool GetBackSpaceUnIndents();

        /// <inheritdoc cref="ScintillaGateway.SetMouseDwellTime"/>
        void SetMouseDwellTime(int periodMilliseconds);

        /// <inheritdoc cref="ScintillaGateway.GetMouseDwellTime"/>
        int GetMouseDwellTime();

        /// <inheritdoc cref="ScintillaGateway.WordStartPosition"/>
        Position WordStartPosition(Position pos, bool onlyWordCharacters);

        /// <inheritdoc cref="ScintillaGateway.WordEndPosition"/>
        Position WordEndPosition(Position pos, bool onlyWordCharacters);

        /// <inheritdoc cref="ScintillaGateway.IsRangeWord"/>
        bool IsRangeWord(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.SetIdleStyling"/>
        void SetIdleStyling(IdleStyling idleStyling);

        /// <inheritdoc cref="ScintillaGateway.GetIdleStyling"/>
        IdleStyling GetIdleStyling();

        /// <inheritdoc cref="ScintillaGateway.SetWrapMode"/>
        void SetWrapMode(Wrap wrapMode);

        /// <inheritdoc cref="ScintillaGateway.GetWrapMode"/>
        Wrap GetWrapMode();

        /// <inheritdoc cref="ScintillaGateway.SetWrapVisualFlags"/>
        void SetWrapVisualFlags(WrapVisualFlag wrapVisualFlags);

        /// <inheritdoc cref="ScintillaGateway.GetWrapVisualFlags"/>
        WrapVisualFlag GetWrapVisualFlags();

        /// <inheritdoc cref="ScintillaGateway.SetWrapVisualFlagsLocation"/>
        void SetWrapVisualFlagsLocation(WrapVisualLocation wrapVisualFlagsLocation);

        /// <inheritdoc cref="ScintillaGateway.GetWrapVisualFlagsLocation"/>
        WrapVisualLocation GetWrapVisualFlagsLocation();

        /// <inheritdoc cref="ScintillaGateway.SetWrapStartIndent"/>
        void SetWrapStartIndent(int indent);

        /// <inheritdoc cref="ScintillaGateway.GetWrapStartIndent"/>
        int GetWrapStartIndent();

        /// <inheritdoc cref="ScintillaGateway.SetWrapIndentMode"/>
        void SetWrapIndentMode(WrapIndentMode wrapIndentMode);

        /// <inheritdoc cref="ScintillaGateway.GetWrapIndentMode"/>
        WrapIndentMode GetWrapIndentMode();

        /// <inheritdoc cref="ScintillaGateway.SetLayoutCache"/>
        void SetLayoutCache(LineCache cacheMode);

        /// <inheritdoc cref="ScintillaGateway.GetLayoutCache"/>
        LineCache GetLayoutCache();

        /// <inheritdoc cref="ScintillaGateway.SetScrollWidth"/>
        void SetScrollWidth(int pixelWidth);

        /// <inheritdoc cref="ScintillaGateway.GetScrollWidth"/>
        int GetScrollWidth();

        /// <inheritdoc cref="ScintillaGateway.SetScrollWidthTracking"/>
        void SetScrollWidthTracking(bool tracking);

        /// <inheritdoc cref="ScintillaGateway.GetScrollWidthTracking"/>
        bool GetScrollWidthTracking();

        /// <inheritdoc cref="ScintillaGateway.TextWidth"/>
        int TextWidth(int style, string text);

        /// <inheritdoc cref="ScintillaGateway.SetEndAtLastLine"/>
        void SetEndAtLastLine(bool endAtLastLine);

        /// <inheritdoc cref="ScintillaGateway.GetEndAtLastLine"/>
        bool GetEndAtLastLine();

        /// <inheritdoc cref="ScintillaGateway.TextHeight"/>
        int TextHeight(Position line);

        /// <inheritdoc cref="ScintillaGateway.SetVScrollBar"/>
        void SetVScrollBar(bool visible);

        /// <inheritdoc cref="ScintillaGateway.GetVScrollBar"/>
        bool GetVScrollBar();

        /// <inheritdoc cref="ScintillaGateway.AppendText"/>
        void AppendText(string text);

        /// <inheritdoc cref="ScintillaGateway.GetPhasesDraw"/>
        PhasesDraw GetPhasesDraw();

        /// <inheritdoc cref="ScintillaGateway.SetPhasesDraw"/>
        void SetPhasesDraw(PhasesDraw phases);

        /// <inheritdoc cref="ScintillaGateway.SetFontQuality"/>
        void SetFontQuality(FontQuality fontQuality);

        /// <inheritdoc cref="ScintillaGateway.GetFontQuality"/>
        FontQuality GetFontQuality();

        /// <inheritdoc cref="ScintillaGateway.SetFirstVisibleLine"/>
        void SetFirstVisibleLine(Position displayLine);

        /// <inheritdoc cref="ScintillaGateway.SetMultiPaste"/>
        void SetMultiPaste(MultiPaste multiPaste);

        /// <inheritdoc cref="ScintillaGateway.GetMultiPaste"/>
        MultiPaste GetMultiPaste();

        /// <inheritdoc cref="ScintillaGateway.GetTag"/>
        string GetTag(int tagNumber);

        /// <inheritdoc cref="ScintillaGateway.LinesJoin"/>
        void LinesJoin();

        /// <inheritdoc cref="ScintillaGateway.LinesSplit"/>
        void LinesSplit(int pixelWidth);

        /// <inheritdoc cref="ScintillaGateway.SetFoldMarginColour"/>
        void SetFoldMarginColour(bool useSetting, Colour back);

        /// <inheritdoc cref="ScintillaGateway.SetFoldMarginHiColour"/>
        void SetFoldMarginHiColour(bool useSetting, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.SetAccessibility"/>
        void SetAccessibility(Accessibility accessibility);

        /// <inheritdoc cref="ScintillaGateway.GetAccessibility"/>
        Accessibility GetAccessibility();

        /// <inheritdoc cref="ScintillaGateway.LineDown"/>
        void LineDown();

        /// <inheritdoc cref="ScintillaGateway.LineDownExtend"/>
        void LineDownExtend();

        /// <inheritdoc cref="ScintillaGateway.LineUp"/>
        void LineUp();

        /// <inheritdoc cref="ScintillaGateway.LineUpExtend"/>
        void LineUpExtend();

        /// <inheritdoc cref="ScintillaGateway.CharLeft"/>
        void CharLeft();

        /// <inheritdoc cref="ScintillaGateway.CharLeftExtend"/>
        void CharLeftExtend();

        /// <inheritdoc cref="ScintillaGateway.CharRight"/>
        void CharRight();

        /// <inheritdoc cref="ScintillaGateway.CharRightExtend"/>
        void CharRightExtend();

        /// <inheritdoc cref="ScintillaGateway.WordLeft"/>
        void WordLeft();

        /// <inheritdoc cref="ScintillaGateway.WordLeftExtend"/>
        void WordLeftExtend();

        /// <inheritdoc cref="ScintillaGateway.WordRight"/>
        void WordRight();

        /// <inheritdoc cref="ScintillaGateway.WordRightExtend"/>
        void WordRightExtend();

        /// <inheritdoc cref="ScintillaGateway.Home"/>
        void Home();

        /// <inheritdoc cref="ScintillaGateway.HomeExtend"/>
        void HomeExtend();

        /// <inheritdoc cref="ScintillaGateway.LineEnd"/>
        void LineEnd();

        /// <inheritdoc cref="ScintillaGateway.LineEndExtend"/>
        void LineEndExtend();

        /// <inheritdoc cref="ScintillaGateway.DocumentStart"/>
        void DocumentStart();

        /// <inheritdoc cref="ScintillaGateway.DocumentStartExtend"/>
        void DocumentStartExtend();

        /// <inheritdoc cref="ScintillaGateway.DocumentEnd"/>
        void DocumentEnd();

        /// <inheritdoc cref="ScintillaGateway.DocumentEndExtend"/>
        void DocumentEndExtend();

        /// <inheritdoc cref="ScintillaGateway.PageUp"/>
        void PageUp();

        /// <inheritdoc cref="ScintillaGateway.PageUpExtend"/>
        void PageUpExtend();

        /// <inheritdoc cref="ScintillaGateway.PageDown"/>
        void PageDown();

        /// <inheritdoc cref="ScintillaGateway.PageDownExtend"/>
        void PageDownExtend();

        /// <inheritdoc cref="ScintillaGateway.EditToggleOvertype"/>
        void EditToggleOvertype();

        /// <inheritdoc cref="ScintillaGateway.Cancel"/>
        void Cancel();

        /// <inheritdoc cref="ScintillaGateway.DeleteBack"/>
        void DeleteBack();

        /// <inheritdoc cref="ScintillaGateway.Tab"/>
        void Tab();

        /// <inheritdoc cref="ScintillaGateway.LineIndent"/>
        void LineIndent();

        /// <inheritdoc cref="ScintillaGateway.BackTab"/>
        void BackTab();

        /// <inheritdoc cref="ScintillaGateway.LineDedent"/>
        void LineDedent();

        /// <inheritdoc cref="ScintillaGateway.NewLine"/>
        void NewLine();

        /// <inheritdoc cref="ScintillaGateway.FormFeed"/>
        void FormFeed();

        /// <inheritdoc cref="ScintillaGateway.VCHome"/>
        void VCHome();

        /// <inheritdoc cref="ScintillaGateway.VCHomeExtend"/>
        void VCHomeExtend();

        /// <inheritdoc cref="ScintillaGateway.ZoomIn"/>
        void ZoomIn();

        /// <inheritdoc cref="ScintillaGateway.ZoomOut"/>
        void ZoomOut();

        /// <inheritdoc cref="ScintillaGateway.DelWordLeft"/>
        void DelWordLeft();

        /// <inheritdoc cref="ScintillaGateway.DelWordRight"/>
        void DelWordRight();

        /// <inheritdoc cref="ScintillaGateway.DelWordRightEnd"/>
        void DelWordRightEnd();

        /// <inheritdoc cref="ScintillaGateway.LineCut"/>
        void LineCut();

        /// <inheritdoc cref="ScintillaGateway.LineDelete"/>
        void LineDelete();

        /// <inheritdoc cref="ScintillaGateway.LineTranspose"/>
        void LineTranspose();

        /// <inheritdoc cref="ScintillaGateway.LineReverse"/>
        void LineReverse();

        /// <inheritdoc cref="ScintillaGateway.LineDuplicate"/>
        void LineDuplicate();

        /// <inheritdoc cref="ScintillaGateway.LowerCase"/>
        void LowerCase();

        /// <inheritdoc cref="ScintillaGateway.UpperCase"/>
        void UpperCase();

        /// <inheritdoc cref="ScintillaGateway.LineScrollDown"/>
        void LineScrollDown();

        /// <inheritdoc cref="ScintillaGateway.LineScrollUp"/>
        void LineScrollUp();

        /// <inheritdoc cref="ScintillaGateway.DeleteBackNotLine"/>
        void DeleteBackNotLine();

        /// <inheritdoc cref="ScintillaGateway.HomeDisplay"/>
        void HomeDisplay();

        /// <inheritdoc cref="ScintillaGateway.HomeDisplayExtend"/>
        void HomeDisplayExtend();

        /// <inheritdoc cref="ScintillaGateway.LineEndDisplay"/>
        void LineEndDisplay();

        /// <inheritdoc cref="ScintillaGateway.LineEndDisplayExtend"/>
        void LineEndDisplayExtend();

        /// <inheritdoc cref="ScintillaGateway.HomeWrap"/>
        void HomeWrap();

        /// <inheritdoc cref="ScintillaGateway.HomeWrapExtend"/>
        void HomeWrapExtend();

        /// <inheritdoc cref="ScintillaGateway.LineEndWrap"/>
        void LineEndWrap();

        /// <inheritdoc cref="ScintillaGateway.LineEndWrapExtend"/>
        void LineEndWrapExtend();

        /// <inheritdoc cref="ScintillaGateway.VCHomeWrap"/>
        void VCHomeWrap();

        /// <inheritdoc cref="ScintillaGateway.VCHomeWrapExtend"/>
        void VCHomeWrapExtend();

        /// <inheritdoc cref="ScintillaGateway.LineCopy"/>
        void LineCopy();

        /// <inheritdoc cref="ScintillaGateway.MoveCaretInsideView"/>
        void MoveCaretInsideView();

        /// <inheritdoc cref="ScintillaGateway.LineLength"/>
        Position LineLength(Position line);

        /// <inheritdoc cref="ScintillaGateway.BraceHighlight"/>
        void BraceHighlight(Position posA, Position posB);

        /// <inheritdoc cref="ScintillaGateway.BraceHighlightIndicator"/>
        void BraceHighlightIndicator(bool useSetting, int indicator);

        /// <inheritdoc cref="ScintillaGateway.BraceBadLight"/>
        void BraceBadLight(Position pos);

        /// <inheritdoc cref="ScintillaGateway.BraceBadLightIndicator"/>
        void BraceBadLightIndicator(bool useSetting, int indicator);

        /// <inheritdoc cref="ScintillaGateway.BraceMatch"/>
        Position BraceMatch(Position pos, int maxReStyle);

        /// <inheritdoc cref="ScintillaGateway.BraceMatchNext"/>
        Position BraceMatchNext(Position pos, Position startPos);

        /// <inheritdoc cref="ScintillaGateway.GetViewEOL"/>
        bool GetViewEOL();

        /// <inheritdoc cref="ScintillaGateway.SetViewEOL"/>
        void SetViewEOL(bool visible);

        /// <inheritdoc cref="ScintillaGateway.GetDocPointer"/>
        IntPtr GetDocPointer();

        /// <inheritdoc cref="ScintillaGateway.SetDocPointer"/>
        void SetDocPointer(IntPtr doc);

        /// <inheritdoc cref="ScintillaGateway.SetModEventMask"/>
        void SetModEventMask(ModificationFlags eventMask);

        /// <inheritdoc cref="ScintillaGateway.GetEdgeColumn"/>
        Position GetEdgeColumn();

        /// <inheritdoc cref="ScintillaGateway.SetEdgeColumn"/>
        void SetEdgeColumn(Position column);

        /// <inheritdoc cref="ScintillaGateway.GetEdgeMode"/>
        EdgeVisualStyle GetEdgeMode();

        /// <inheritdoc cref="ScintillaGateway.SetEdgeMode"/>
        void SetEdgeMode(EdgeVisualStyle edgeMode);

        /// <inheritdoc cref="ScintillaGateway.GetEdgeColour"/>
        Colour GetEdgeColour();

        /// <inheritdoc cref="ScintillaGateway.SetEdgeColour"/>
        void SetEdgeColour(Colour edgeColour);

        /// <inheritdoc cref="ScintillaGateway.MultiEdgeAddLine"/>
        void MultiEdgeAddLine(Position column, Colour edgeColour);

        /// <inheritdoc cref="ScintillaGateway.MultiEdgeClearAll"/>
        void MultiEdgeClearAll();

        /// <inheritdoc cref="ScintillaGateway.GetMultiEdgeColumn"/>
        Position GetMultiEdgeColumn(int which);

        /// <inheritdoc cref="ScintillaGateway.SearchAnchor"/>
        void SearchAnchor();

        /// <inheritdoc cref="ScintillaGateway.SearchNext"/>
        Position SearchNext(FindOption searchFlags, string text);

        /// <inheritdoc cref="ScintillaGateway.SearchPrev"/>
        Position SearchPrev(FindOption searchFlags, string text);

        /// <inheritdoc cref="ScintillaGateway.LinesOnScreen"/>
        Position LinesOnScreen();

        /// <inheritdoc cref="ScintillaGateway.UsePopUp"/>
        void UsePopUp(PopUp popUpMode);

        /// <inheritdoc cref="ScintillaGateway.SelectionIsRectangle"/>
        bool SelectionIsRectangle();

        /// <inheritdoc cref="ScintillaGateway.SetZoom"/>
        void SetZoom(int zoomInPoints);

        /// <inheritdoc cref="ScintillaGateway.GetZoom"/>
        int GetZoom();

        /// <inheritdoc cref="ScintillaGateway.CreateDocument"/>
        IntPtr CreateDocument(Position bytes, DocumentOption documentOptions);

        /// <inheritdoc cref="ScintillaGateway.AddRefDocument"/>
        void AddRefDocument(IntPtr doc);

        /// <inheritdoc cref="ScintillaGateway.ReleaseDocument"/>
        void ReleaseDocument(IntPtr doc);

        /// <inheritdoc cref="ScintillaGateway.GetDocumentOptions"/>
        DocumentOption GetDocumentOptions();

        /// <inheritdoc cref="ScintillaGateway.GetModEventMask"/>
        ModificationFlags GetModEventMask();

        /// <inheritdoc cref="ScintillaGateway.SetCommandEvents"/>
        void SetCommandEvents(bool commandEvents);

        /// <inheritdoc cref="ScintillaGateway.GetCommandEvents"/>
        bool GetCommandEvents();

        /// <inheritdoc cref="ScintillaGateway.SetFocus"/>
        void SetFocus(bool focus);

        /// <inheritdoc cref="ScintillaGateway.GetFocus"/>
        bool GetFocus();

        /// <inheritdoc cref="ScintillaGateway.SetStatus"/>
        void SetStatus(Status status);

        /// <inheritdoc cref="ScintillaGateway.GetStatus"/>
        Status GetStatus();

        /// <inheritdoc cref="ScintillaGateway.SetMouseDownCaptures"/>
        void SetMouseDownCaptures(bool captures);

        /// <inheritdoc cref="ScintillaGateway.GetMouseDownCaptures"/>
        bool GetMouseDownCaptures();

        /// <inheritdoc cref="ScintillaGateway.SetMouseWheelCaptures"/>
        void SetMouseWheelCaptures(bool captures);

        /// <inheritdoc cref="ScintillaGateway.GetMouseWheelCaptures"/>
        bool GetMouseWheelCaptures();

        /// <inheritdoc cref="ScintillaGateway.SetCursor"/>
        void SetCursor(CursorShape cursorType);

        /// <inheritdoc cref="ScintillaGateway.GetCursor"/>
        CursorShape GetCursor();

        /// <inheritdoc cref="ScintillaGateway.SetControlCharSymbol"/>
        void SetControlCharSymbol(int symbol);

        /// <inheritdoc cref="ScintillaGateway.GetControlCharSymbol"/>
        int GetControlCharSymbol();

        /// <inheritdoc cref="ScintillaGateway.WordPartLeft"/>
        void WordPartLeft();

        /// <inheritdoc cref="ScintillaGateway.WordPartLeftExtend"/>
        void WordPartLeftExtend();

        /// <inheritdoc cref="ScintillaGateway.WordPartRight"/>
        void WordPartRight();

        /// <inheritdoc cref="ScintillaGateway.WordPartRightExtend"/>
        void WordPartRightExtend();

        /// <inheritdoc cref="ScintillaGateway.SetVisiblePolicy"/>
        void SetVisiblePolicy(VisiblePolicy visiblePolicy, int visibleSlop);

        /// <inheritdoc cref="ScintillaGateway.DelLineLeft"/>
        void DelLineLeft();

        /// <inheritdoc cref="ScintillaGateway.DelLineRight"/>
        void DelLineRight();

        /// <inheritdoc cref="ScintillaGateway.SetXOffset"/>
        void SetXOffset(int xOffset);

        /// <inheritdoc cref="ScintillaGateway.GetXOffset"/>
        int GetXOffset();

        /// <inheritdoc cref="ScintillaGateway.ChooseCaretX"/>
        void ChooseCaretX();

        /// <inheritdoc cref="ScintillaGateway.GrabFocus"/>
        void GrabFocus();

        /// <inheritdoc cref="ScintillaGateway.SetXCaretPolicy"/>
        void SetXCaretPolicy(CaretPolicy caretPolicy, int caretSlop);

        /// <inheritdoc cref="ScintillaGateway.SetYCaretPolicy"/>
        void SetYCaretPolicy(CaretPolicy caretPolicy, int caretSlop);

        /// <inheritdoc cref="ScintillaGateway.SetPrintWrapMode"/>
        void SetPrintWrapMode(Wrap wrapMode);

        /// <inheritdoc cref="ScintillaGateway.GetPrintWrapMode"/>
        Wrap GetPrintWrapMode();

        /// <inheritdoc cref="ScintillaGateway.SetHotspotActiveFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetHotspotActiveFore(bool useSetting, Colour fore);

        /// <inheritdoc cref="ScintillaGateway.GetHotspotActiveFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Colour GetHotspotActiveFore();

        /// <inheritdoc cref="ScintillaGateway.SetHotspotActiveBack"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetHotspotActiveBack(bool useSetting, Colour back);

        /// <inheritdoc cref="ScintillaGateway.GetHotspotActiveBack"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Colour GetHotspotActiveBack();

        /// <inheritdoc cref="ScintillaGateway.SetHotspotActiveUnderline"/>
        void SetHotspotActiveUnderline(bool underline);

        /// <inheritdoc cref="ScintillaGateway.GetHotspotActiveUnderline"/>
        bool GetHotspotActiveUnderline();

        /// <inheritdoc cref="ScintillaGateway.SetHotspotSingleLine"/>
        void SetHotspotSingleLine(bool singleLine);

        /// <inheritdoc cref="ScintillaGateway.GetHotspotSingleLine"/>
        bool GetHotspotSingleLine();

        /// <inheritdoc cref="ScintillaGateway.ParaDown"/>
        void ParaDown();

        /// <inheritdoc cref="ScintillaGateway.ParaDownExtend"/>
        void ParaDownExtend();

        /// <inheritdoc cref="ScintillaGateway.ParaUp"/>
        void ParaUp();

        /// <inheritdoc cref="ScintillaGateway.ParaUpExtend"/>
        void ParaUpExtend();

        /// <inheritdoc cref="ScintillaGateway.PositionBefore"/>
        Position PositionBefore(Position pos);

        /// <inheritdoc cref="ScintillaGateway.PositionAfter"/>
        Position PositionAfter(Position pos);

        /// <inheritdoc cref="ScintillaGateway.PositionRelative"/>
        Position PositionRelative(Position pos, Position relative);

        /// <inheritdoc cref="ScintillaGateway.PositionRelativeCodeUnits"/>
        Position PositionRelativeCodeUnits(Position pos, Position relative);

        /// <inheritdoc cref="ScintillaGateway.CopyRange"/>
        void CopyRange(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.CopyText"/>
        void CopyText(string text);

        /// <inheritdoc cref="ScintillaGateway.SetSelectionMode"/>
        void SetSelectionMode(SelectionMode selectionMode);

        /// <inheritdoc cref="ScintillaGateway.ChangeSelectionMode"/>
        void ChangeSelectionMode(SelectionMode selectionMode);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionMode"/>
        SelectionMode GetSelectionMode();

        /// <inheritdoc cref="ScintillaGateway.SetMoveExtendsSelection"/>
        void SetMoveExtendsSelection(bool moveExtendsSelection);

        /// <inheritdoc cref="ScintillaGateway.GetMoveExtendsSelection"/>
        bool GetMoveExtendsSelection();

        /// <inheritdoc cref="ScintillaGateway.GetLineSelStartPosition"/>
        Position GetLineSelStartPosition(Position line);

        /// <inheritdoc cref="ScintillaGateway.GetLineSelEndPosition"/>
        Position GetLineSelEndPosition(Position line);

        /// <inheritdoc cref="ScintillaGateway.LineDownRectExtend"/>
        void LineDownRectExtend();

        /// <inheritdoc cref="ScintillaGateway.LineUpRectExtend"/>
        void LineUpRectExtend();

        /// <inheritdoc cref="ScintillaGateway.CharLeftRectExtend"/>
        void CharLeftRectExtend();

        /// <inheritdoc cref="ScintillaGateway.CharRightRectExtend"/>
        void CharRightRectExtend();

        /// <inheritdoc cref="ScintillaGateway.HomeRectExtend"/>
        void HomeRectExtend();

        /// <inheritdoc cref="ScintillaGateway.VCHomeRectExtend"/>
        void VCHomeRectExtend();

        /// <inheritdoc cref="ScintillaGateway.LineEndRectExtend"/>
        void LineEndRectExtend();

        /// <inheritdoc cref="ScintillaGateway.PageUpRectExtend"/>
        void PageUpRectExtend();

        /// <inheritdoc cref="ScintillaGateway.PageDownRectExtend"/>
        void PageDownRectExtend();

        /// <inheritdoc cref="ScintillaGateway.StutteredPageUp"/>
        void StutteredPageUp();

        /// <inheritdoc cref="ScintillaGateway.StutteredPageUpExtend"/>
        void StutteredPageUpExtend();

        /// <inheritdoc cref="ScintillaGateway.StutteredPageDown"/>
        void StutteredPageDown();

        /// <inheritdoc cref="ScintillaGateway.StutteredPageDownExtend"/>
        void StutteredPageDownExtend();

        /// <inheritdoc cref="ScintillaGateway.WordLeftEnd"/>
        void WordLeftEnd();

        /// <inheritdoc cref="ScintillaGateway.WordLeftEndExtend"/>
        void WordLeftEndExtend();

        /// <inheritdoc cref="ScintillaGateway.WordRightEnd"/>
        void WordRightEnd();

        /// <inheritdoc cref="ScintillaGateway.WordRightEndExtend"/>
        void WordRightEndExtend();

        /// <inheritdoc cref="ScintillaGateway.SetWhitespaceChars"/>
        void SetWhitespaceChars(string characters);

        /// <inheritdoc cref="ScintillaGateway.GetWhitespaceChars"/>
        string GetWhitespaceChars();

        /// <inheritdoc cref="ScintillaGateway.SetPunctuationChars"/>
        void SetPunctuationChars(string characters);

        /// <inheritdoc cref="ScintillaGateway.GetPunctuationChars"/>
        string GetPunctuationChars();

        /// <inheritdoc cref="ScintillaGateway.SetCharsDefault"/>
        void SetCharsDefault();

        /// <inheritdoc cref="ScintillaGateway.AutoCGetCurrent"/>
        int AutoCGetCurrent();

        /// <inheritdoc cref="ScintillaGateway.AutoCGetCurrentText"/>
        string AutoCGetCurrentText();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetCaseInsensitiveBehaviour"/>
        void AutoCSetCaseInsensitiveBehaviour(CaseInsensitiveBehaviour behaviour);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetCaseInsensitiveBehaviour"/>
        CaseInsensitiveBehaviour AutoCGetCaseInsensitiveBehaviour();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetMulti"/>
        void AutoCSetMulti(MultiAutoComplete multi);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetMulti"/>
        MultiAutoComplete AutoCGetMulti();

        /// <inheritdoc cref="ScintillaGateway.AutoCSetOrder"/>
        void AutoCSetOrder(Ordering order);

        /// <inheritdoc cref="ScintillaGateway.AutoCGetOrder"/>
        Ordering AutoCGetOrder();

        /// <inheritdoc cref="ScintillaGateway.Allocate"/>
        void Allocate(Position bytes);

        /// <inheritdoc cref="ScintillaGateway.TargetAsUTF8"/>
        string TargetAsUTF8();

        /// <inheritdoc cref="ScintillaGateway.SetLengthForEncode"/>
        void SetLengthForEncode(Position bytes);

        /// <inheritdoc cref="ScintillaGateway.EncodedFromUTF8"/>
        unsafe string EncodedFromUTF8(string utf8);

        /// <inheritdoc cref="ScintillaGateway.FindColumn"/>
        Position FindColumn(Position line, Position column);

        /// <inheritdoc cref="ScintillaGateway.GetCaretSticky"/>
        CaretSticky GetCaretSticky();

        /// <inheritdoc cref="ScintillaGateway.SetCaretSticky"/>
        void SetCaretSticky(CaretSticky useCaretStickyBehaviour);

        /// <inheritdoc cref="ScintillaGateway.ToggleCaretSticky"/>
        void ToggleCaretSticky();

        /// <inheritdoc cref="ScintillaGateway.SetPasteConvertEndings"/>
        void SetPasteConvertEndings(bool convert);

        /// <inheritdoc cref="ScintillaGateway.GetPasteConvertEndings"/>
        bool GetPasteConvertEndings();

        /// <inheritdoc cref="ScintillaGateway.ReplaceRectangular"/>
        void ReplaceRectangular(string text);

        /// <inheritdoc cref="ScintillaGateway.SelectionDuplicate"/>
        void SelectionDuplicate();

        /// <inheritdoc cref="ScintillaGateway.SetCaretLineBackAlpha"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetCaretLineBackAlpha(Alpha alpha);

        /// <inheritdoc cref="ScintillaGateway.GetCaretLineBackAlpha"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Alpha GetCaretLineBackAlpha();

        /// <inheritdoc cref="ScintillaGateway.SetCaretStyle"/>
        void SetCaretStyle(CaretStyle caretStyle);

        /// <inheritdoc cref="ScintillaGateway.GetCaretStyle"/>
        CaretStyle GetCaretStyle();

        /// <inheritdoc cref="ScintillaGateway.SetIndicatorCurrent"/>
        void SetIndicatorCurrent(int indicator);

        /// <inheritdoc cref="ScintillaGateway.GetIndicatorCurrent"/>
        int GetIndicatorCurrent();

        /// <inheritdoc cref="ScintillaGateway.SetIndicatorValue"/>
        void SetIndicatorValue(int value);

        /// <inheritdoc cref="ScintillaGateway.GetIndicatorValue"/>
        int GetIndicatorValue();

        /// <inheritdoc cref="ScintillaGateway.IndicatorFillRange"/>
        void IndicatorFillRange(Position start, Position lengthFill);

        /// <inheritdoc cref="ScintillaGateway.IndicatorClearRange"/>
        void IndicatorClearRange(Position start, Position lengthClear);

        /// <inheritdoc cref="ScintillaGateway.IndicatorAllOnFor"/>
        int IndicatorAllOnFor(Position pos);

        /// <inheritdoc cref="ScintillaGateway.IndicatorValueAt"/>
        int IndicatorValueAt(int indicator, Position pos);

        /// <inheritdoc cref="ScintillaGateway.IndicatorStart"/>
        Position IndicatorStart(int indicator, Position pos);

        /// <inheritdoc cref="ScintillaGateway.IndicatorEnd"/>
        Position IndicatorEnd(int indicator, Position pos);

        /// <inheritdoc cref="ScintillaGateway.SetPositionCache"/>
        void SetPositionCache(int size);

        /// <inheritdoc cref="ScintillaGateway.GetPositionCache"/>
        int GetPositionCache();

        /// <inheritdoc cref="ScintillaGateway.SetLayoutThreads"/>
        void SetLayoutThreads(int threads);

        /// <inheritdoc cref="ScintillaGateway.GetLayoutThreads"/>
        int GetLayoutThreads();

        /// <inheritdoc cref="ScintillaGateway.CopyAllowLine"/>
        void CopyAllowLine();

        /// <inheritdoc cref="ScintillaGateway.CutAllowLine"/>
        void CutAllowLine();

        /// <inheritdoc cref="ScintillaGateway.SetCopySeparator"/>
        void SetCopySeparator(string separator);

        /// <inheritdoc cref="ScintillaGateway.GetCopySeparator"/>
        string GetCopySeparator();

        /// <inheritdoc cref="ScintillaGateway.GetCharacterPointer"/>
        IntPtr GetCharacterPointer();

        /// <inheritdoc cref="ScintillaGateway.GetRangePointer"/>
        IntPtr GetRangePointer(Position start, Position lengthRange);

        /// <inheritdoc cref="ScintillaGateway.GetGapPosition"/>
        Position GetGapPosition();

        /// <inheritdoc cref="ScintillaGateway.IndicSetAlpha"/>
        void IndicSetAlpha(int indicator, Alpha alpha);

        /// <inheritdoc cref="ScintillaGateway.IndicGetAlpha"/>
        Alpha IndicGetAlpha(int indicator);

        /// <inheritdoc cref="ScintillaGateway.IndicSetOutlineAlpha"/>
        void IndicSetOutlineAlpha(int indicator, Alpha alpha);

        /// <inheritdoc cref="ScintillaGateway.IndicGetOutlineAlpha"/>
        Alpha IndicGetOutlineAlpha(int indicator);

        /// <inheritdoc cref="ScintillaGateway.SetExtraAscent"/>
        void SetExtraAscent(int extraAscent);

        /// <inheritdoc cref="ScintillaGateway.GetExtraAscent"/>
        int GetExtraAscent();

        /// <inheritdoc cref="ScintillaGateway.SetExtraDescent"/>
        void SetExtraDescent(int extraDescent);

        /// <inheritdoc cref="ScintillaGateway.GetExtraDescent"/>
        int GetExtraDescent();

        /// <inheritdoc cref="ScintillaGateway.MarkerSymbolDefined"/>
        MarkerSymbol MarkerSymbolDefined(int markerNumber);

        /// <inheritdoc cref="ScintillaGateway.MarginSetText"/>
        void MarginSetText(Position line, string text);

        /// <inheritdoc cref="ScintillaGateway.MarginGetText"/>
        string MarginGetText(Position line);

        /// <inheritdoc cref="ScintillaGateway.MarginSetStyle"/>
        void MarginSetStyle(Position line, int style);

        /// <inheritdoc cref="ScintillaGateway.MarginGetStyle"/>
        int MarginGetStyle(Position line);

        /// <inheritdoc cref="ScintillaGateway.MarginSetStyles"/>
        void MarginSetStyles(Position line, string styles);

        /// <inheritdoc cref="ScintillaGateway.MarginGetStyles"/>
        string MarginGetStyles(Position line);

        /// <inheritdoc cref="ScintillaGateway.MarginTextClearAll"/>
        void MarginTextClearAll();

        /// <inheritdoc cref="ScintillaGateway.MarginSetStyleOffset"/>
        void MarginSetStyleOffset(int style);

        /// <inheritdoc cref="ScintillaGateway.MarginGetStyleOffset"/>
        int MarginGetStyleOffset();

        /// <inheritdoc cref="ScintillaGateway.SetMarginOptions"/>
        void SetMarginOptions(MarginOption marginOptions);

        /// <inheritdoc cref="ScintillaGateway.GetMarginOptions"/>
        MarginOption GetMarginOptions();

        /// <inheritdoc cref="ScintillaGateway.AnnotationSetText"/>
        void AnnotationSetText(Position line, string text);

        /// <inheritdoc cref="ScintillaGateway.AnnotationGetText"/>
        string AnnotationGetText(Position line);

        /// <inheritdoc cref="ScintillaGateway.AnnotationSetStyle"/>
        void AnnotationSetStyle(Position line, int style);

        /// <inheritdoc cref="ScintillaGateway.AnnotationGetStyle"/>
        int AnnotationGetStyle(Position line);

        /// <inheritdoc cref="ScintillaGateway.AnnotationSetStyles"/>
        void AnnotationSetStyles(Position line, string styles);

        /// <inheritdoc cref="ScintillaGateway.AnnotationGetStyles"/>
        string AnnotationGetStyles(Position line);

        /// <inheritdoc cref="ScintillaGateway.AnnotationGetLines"/>
        int AnnotationGetLines(Position line);

        /// <inheritdoc cref="ScintillaGateway.AnnotationClearAll"/>
        void AnnotationClearAll();

        /// <inheritdoc cref="ScintillaGateway.AnnotationSetVisible"/>
        void AnnotationSetVisible(AnnotationVisible visible);

        /// <inheritdoc cref="ScintillaGateway.AnnotationGetVisible"/>
        AnnotationVisible AnnotationGetVisible();

        /// <inheritdoc cref="ScintillaGateway.AnnotationSetStyleOffset"/>
        void AnnotationSetStyleOffset(int style);

        /// <inheritdoc cref="ScintillaGateway.AnnotationGetStyleOffset"/>
        int AnnotationGetStyleOffset();

        /// <inheritdoc cref="ScintillaGateway.ReleaseAllExtendedStyles"/>
        void ReleaseAllExtendedStyles();

        /// <inheritdoc cref="ScintillaGateway.AllocateExtendedStyles"/>
        int AllocateExtendedStyles(int numberStyles);

        /// <inheritdoc cref="ScintillaGateway.AddUndoAction"/>
        void AddUndoAction(int token, UndoFlags flags);

        /// <inheritdoc cref="ScintillaGateway.CharPositionFromPoint"/>
        Position CharPositionFromPoint(int x, int y);

        /// <inheritdoc cref="ScintillaGateway.CharPositionFromPointClose"/>
        Position CharPositionFromPointClose(int x, int y);

        /// <inheritdoc cref="ScintillaGateway.SetMouseSelectionRectangularSwitch"/>
        void SetMouseSelectionRectangularSwitch(bool mouseSelectionRectangularSwitch);

        /// <inheritdoc cref="ScintillaGateway.GetMouseSelectionRectangularSwitch"/>
        bool GetMouseSelectionRectangularSwitch();

        /// <inheritdoc cref="ScintillaGateway.SetMultipleSelection"/>
        void SetMultipleSelection(bool multipleSelection);

        /// <inheritdoc cref="ScintillaGateway.GetMultipleSelection"/>
        bool GetMultipleSelection();

        /// <inheritdoc cref="ScintillaGateway.SetAdditionalSelectionTyping"/>
        void SetAdditionalSelectionTyping(bool additionalSelectionTyping);

        /// <inheritdoc cref="ScintillaGateway.GetAdditionalSelectionTyping"/>
        bool GetAdditionalSelectionTyping();

        /// <inheritdoc cref="ScintillaGateway.SetAdditionalCaretsBlink"/>
        void SetAdditionalCaretsBlink(bool additionalCaretsBlink);

        /// <inheritdoc cref="ScintillaGateway.GetAdditionalCaretsBlink"/>
        bool GetAdditionalCaretsBlink();

        /// <inheritdoc cref="ScintillaGateway.SetAdditionalCaretsVisible"/>
        void SetAdditionalCaretsVisible(bool additionalCaretsVisible);

        /// <inheritdoc cref="ScintillaGateway.GetAdditionalCaretsVisible"/>
        bool GetAdditionalCaretsVisible();

        /// <inheritdoc cref="ScintillaGateway.GetSelections"/>
        int GetSelections();

        /// <inheritdoc cref="ScintillaGateway.GetSelectionEmpty"/>
        bool GetSelectionEmpty();

        /// <inheritdoc cref="ScintillaGateway.ClearSelections"/>
        void ClearSelections();

        /// <inheritdoc cref="ScintillaGateway.SetSelection"/>
        void SetSelection(Position caret, Position anchor);

        /// <inheritdoc cref="ScintillaGateway.AddSelection"/>
        void AddSelection(Position caret, Position anchor);

        /// <inheritdoc cref="ScintillaGateway.SelectionFromPoint"/>
        int SelectionFromPoint(int x, int y);

        /// <inheritdoc cref="ScintillaGateway.DropSelectionN"/>
        void DropSelectionN(int selection);

        /// <inheritdoc cref="ScintillaGateway.SetMainSelection"/>
        void SetMainSelection(int selection);

        /// <inheritdoc cref="ScintillaGateway.GetMainSelection"/>
        int GetMainSelection();

        /// <inheritdoc cref="ScintillaGateway.SetSelectionNCaret"/>
        void SetSelectionNCaret(int selection, Position caret);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNCaret"/>
        Position GetSelectionNCaret(int selection);

        /// <inheritdoc cref="ScintillaGateway.SetSelectionNAnchor"/>
        void SetSelectionNAnchor(int selection, Position anchor);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNAnchor"/>
        Position GetSelectionNAnchor(int selection);

        /// <inheritdoc cref="ScintillaGateway.SetSelectionNCaretVirtualSpace"/>
        void SetSelectionNCaretVirtualSpace(int selection, Position space);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNCaretVirtualSpace"/>
        Position GetSelectionNCaretVirtualSpace(int selection);

        /// <inheritdoc cref="ScintillaGateway.SetSelectionNAnchorVirtualSpace"/>
        void SetSelectionNAnchorVirtualSpace(int selection, Position space);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNAnchorVirtualSpace"/>
        Position GetSelectionNAnchorVirtualSpace(int selection);

        /// <inheritdoc cref="ScintillaGateway.SetSelectionNStart"/>
        void SetSelectionNStart(int selection, Position anchor);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNStart"/>
        Position GetSelectionNStart(int selection);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNStartVirtualSpace"/>
        Position GetSelectionNStartVirtualSpace(int selection);

        /// <inheritdoc cref="ScintillaGateway.SetSelectionNEnd"/>
        void SetSelectionNEnd(int selection, Position caret);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNEndVirtualSpace"/>
        Position GetSelectionNEndVirtualSpace(int selection);

        /// <inheritdoc cref="ScintillaGateway.GetSelectionNEnd"/>
        Position GetSelectionNEnd(int selection);

        /// <inheritdoc cref="ScintillaGateway.SetRectangularSelectionCaret"/>
        void SetRectangularSelectionCaret(Position caret);

        /// <inheritdoc cref="ScintillaGateway.GetRectangularSelectionCaret"/>
        Position GetRectangularSelectionCaret();

        /// <inheritdoc cref="ScintillaGateway.SetRectangularSelectionAnchor"/>
        void SetRectangularSelectionAnchor(Position anchor);

        /// <inheritdoc cref="ScintillaGateway.GetRectangularSelectionAnchor"/>
        Position GetRectangularSelectionAnchor();

        /// <inheritdoc cref="ScintillaGateway.SetRectangularSelectionCaretVirtualSpace"/>
        void SetRectangularSelectionCaretVirtualSpace(Position space);

        /// <inheritdoc cref="ScintillaGateway.GetRectangularSelectionCaretVirtualSpace"/>
        Position GetRectangularSelectionCaretVirtualSpace();

        /// <inheritdoc cref="ScintillaGateway.SetRectangularSelectionAnchorVirtualSpace"/>
        void SetRectangularSelectionAnchorVirtualSpace(Position space);

        /// <inheritdoc cref="ScintillaGateway.GetRectangularSelectionAnchorVirtualSpace"/>
        Position GetRectangularSelectionAnchorVirtualSpace();

        /// <inheritdoc cref="ScintillaGateway.SetVirtualSpaceOptions"/>
        void SetVirtualSpaceOptions(VirtualSpace virtualSpaceOptions);

        /// <inheritdoc cref="ScintillaGateway.GetVirtualSpaceOptions"/>
        VirtualSpace GetVirtualSpaceOptions();

        /// <inheritdoc cref="ScintillaGateway.SetRectangularSelectionModifier"/>
        void SetRectangularSelectionModifier(int modifier);

        /// <inheritdoc cref="ScintillaGateway.GetRectangularSelectionModifier"/>
        int GetRectangularSelectionModifier();

        /// <inheritdoc cref="ScintillaGateway.SetAdditionalSelFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetAdditionalSelFore(Colour fore);

        /// <inheritdoc cref="ScintillaGateway.SetAdditionalSelBack"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetAdditionalSelBack(Colour back);

        /// <inheritdoc cref="ScintillaGateway.SetAdditionalSelAlpha"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetAdditionalSelAlpha(Alpha alpha);

        /// <inheritdoc cref="ScintillaGateway.GetAdditionalSelAlpha"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Alpha GetAdditionalSelAlpha();

        /// <inheritdoc cref="ScintillaGateway.SetAdditionalCaretFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        void SetAdditionalCaretFore(Colour fore);

        /// <inheritdoc cref="ScintillaGateway.GetAdditionalCaretFore"/>
        [Obsolete("Use the element colours APIs instead: https://www.scintilla.org/ScintillaDoc.html#ElementColours")]
        Colour GetAdditionalCaretFore();

        /// <inheritdoc cref="ScintillaGateway.RotateSelection"/>
        void RotateSelection();

        /// <inheritdoc cref="ScintillaGateway.SwapMainAnchorCaret"/>
        void SwapMainAnchorCaret();

        /// <inheritdoc cref="ScintillaGateway.MultipleSelectAddNext"/>
        void MultipleSelectAddNext();

        /// <inheritdoc cref="ScintillaGateway.MultipleSelectAddEach"/>
        void MultipleSelectAddEach();

        /// <inheritdoc cref="ScintillaGateway.ChangeLexerState"/>
        int ChangeLexerState(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.ContractedFoldNext"/>
        Position ContractedFoldNext(Position lineStart);

        /// <inheritdoc cref="ScintillaGateway.VerticalCentreCaret"/>
        void VerticalCentreCaret();

        /// <inheritdoc cref="ScintillaGateway.MoveSelectedLinesUp"/>
        void MoveSelectedLinesUp();

        /// <inheritdoc cref="ScintillaGateway.MoveSelectedLinesDown"/>
        void MoveSelectedLinesDown();

        /// <inheritdoc cref="ScintillaGateway.SetIdentifier"/>
        void SetIdentifier(int identifier);

        /// <inheritdoc cref="ScintillaGateway.GetIdentifier"/>
        int GetIdentifier();

        /// <inheritdoc cref="ScintillaGateway.RGBAImageSetWidth"/>
        void RGBAImageSetWidth(int width);

        /// <inheritdoc cref="ScintillaGateway.RGBAImageSetHeight"/>
        void RGBAImageSetHeight(int height);

        /// <inheritdoc cref="ScintillaGateway.RGBAImageSetScale"/>
        void RGBAImageSetScale(int scalePercent);

        /// <inheritdoc cref="ScintillaGateway.MarkerDefineRGBAImage"/>
        void MarkerDefineRGBAImage(int markerNumber, string pixels);

        /// <inheritdoc cref="ScintillaGateway.RegisterRGBAImage"/>
        void RegisterRGBAImage(int type, string pixels);

        /// <inheritdoc cref="ScintillaGateway.ScrollToStart"/>
        void ScrollToStart();

        /// <inheritdoc cref="ScintillaGateway.ScrollToEnd"/>
        void ScrollToEnd();

        /// <inheritdoc cref="ScintillaGateway.SetTechnology"/>
        void SetTechnology(Technology technology);

        /// <inheritdoc cref="ScintillaGateway.GetTechnology"/>
        Technology GetTechnology();

        /// <inheritdoc cref="ScintillaGateway.CreateLoader"/>
        IntPtr CreateLoader(Position bytes, DocumentOption documentOptions);

        /// <inheritdoc cref="ScintillaGateway.FindIndicatorShow"/>
        void FindIndicatorShow(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.FindIndicatorFlash"/>
        void FindIndicatorFlash(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.FindIndicatorHide"/>
        void FindIndicatorHide();

        /// <inheritdoc cref="ScintillaGateway.VCHomeDisplay"/>
        void VCHomeDisplay();

        /// <inheritdoc cref="ScintillaGateway.VCHomeDisplayExtend"/>
        void VCHomeDisplayExtend();

        /// <inheritdoc cref="ScintillaGateway.GetCaretLineVisibleAlways"/>
        bool GetCaretLineVisibleAlways();

        /// <inheritdoc cref="ScintillaGateway.SetCaretLineVisibleAlways"/>
        void SetCaretLineVisibleAlways(bool alwaysVisible);

        /// <inheritdoc cref="ScintillaGateway.SetLineEndTypesAllowed"/>
        void SetLineEndTypesAllowed(LineEndType lineEndBitSet);

        /// <inheritdoc cref="ScintillaGateway.GetLineEndTypesAllowed"/>
        LineEndType GetLineEndTypesAllowed();

        /// <inheritdoc cref="ScintillaGateway.GetLineEndTypesActive"/>
        LineEndType GetLineEndTypesActive();

        /// <inheritdoc cref="ScintillaGateway.SetRepresentation"/>
        void SetRepresentation(string encodedCharacter, string representation);

        /// <inheritdoc cref="ScintillaGateway.GetRepresentation"/>
        unsafe string GetRepresentation(string encodedCharacter);

        /// <inheritdoc cref="ScintillaGateway.ClearRepresentation"/>
        void ClearRepresentation(string encodedCharacter);

        /// <inheritdoc cref="ScintillaGateway.ClearAllRepresentations"/>
        void ClearAllRepresentations();

        /// <inheritdoc cref="ScintillaGateway.SetRepresentationAppearance"/>
        void SetRepresentationAppearance(string encodedCharacter, RepresentationAppearance appearance);

        /// <inheritdoc cref="ScintillaGateway.GetRepresentationAppearance"/>
        RepresentationAppearance GetRepresentationAppearance(string encodedCharacter);

        /// <inheritdoc cref="ScintillaGateway.SetRepresentationColour"/>
        void SetRepresentationColour(string encodedCharacter, ColourAlpha colour);

        /// <inheritdoc cref="ScintillaGateway.GetRepresentationColour"/>
        ColourAlpha GetRepresentationColour(string encodedCharacter);

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationSetText"/>
        void EOLAnnotationSetText(Position line, string text);

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationGetText"/>
        string EOLAnnotationGetText(Position line);

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationSetStyle"/>
        void EOLAnnotationSetStyle(Position line, int style);

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationGetStyle"/>
        int EOLAnnotationGetStyle(Position line);

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationClearAll"/>
        void EOLAnnotationClearAll();

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationSetVisible"/>
        void EOLAnnotationSetVisible(EOLAnnotationVisible visible);

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationGetVisible"/>
        EOLAnnotationVisible EOLAnnotationGetVisible();

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationSetStyleOffset"/>
        void EOLAnnotationSetStyleOffset(int style);

        /// <inheritdoc cref="ScintillaGateway.EOLAnnotationGetStyleOffset"/>
        int EOLAnnotationGetStyleOffset();

        /// <inheritdoc cref="ScintillaGateway.SupportsFeature"/>
        bool SupportsFeature(Supports feature);

        /// <inheritdoc cref="ScintillaGateway.GetLineCharacterIndex"/>
        LineCharacterIndexType GetLineCharacterIndex();

        /// <inheritdoc cref="ScintillaGateway.AllocateLineCharacterIndex"/>
        void AllocateLineCharacterIndex(LineCharacterIndexType lineCharacterIndex);

        /// <inheritdoc cref="ScintillaGateway.ReleaseLineCharacterIndex"/>
        void ReleaseLineCharacterIndex(LineCharacterIndexType lineCharacterIndex);

        /// <inheritdoc cref="ScintillaGateway.LineFromIndexPosition"/>
        Position LineFromIndexPosition(Position pos, LineCharacterIndexType lineCharacterIndex);

        /// <inheritdoc cref="ScintillaGateway.IndexPositionFromLine"/>
        Position IndexPositionFromLine(Position line, LineCharacterIndexType lineCharacterIndex);

        /// <inheritdoc cref="ScintillaGateway.StartRecord"/>
        void StartRecord();

        /// <inheritdoc cref="ScintillaGateway.StopRecord"/>
        void StopRecord();

        /// <inheritdoc cref="ScintillaGateway.GetLexer"/>
        int GetLexer();

        /// <inheritdoc cref="ScintillaGateway.Colourise"/>
        void Colourise(Position start, Position end);

        /// <inheritdoc cref="ScintillaGateway.SetProperty"/>
        void SetProperty(string key, string value);

        /// <inheritdoc cref="ScintillaGateway.SetKeyWords"/>
        void SetKeyWords(int keyWordSet, string keyWords);

        /// <inheritdoc cref="ScintillaGateway.GetProperty"/>
        unsafe string GetProperty(string key);

        /// <inheritdoc cref="ScintillaGateway.GetPropertyExpanded"/>
        [Obsolete("This is now the same as SCI_GETPROPERTY - no expansion is performed. See https://www.scintilla.org/ScintillaDoc.html#SCI_GETPROPERTYEXPANDED")]
        unsafe string GetPropertyExpanded(string key);

        /// <inheritdoc cref="ScintillaGateway.GetPropertyInt"/>
        int GetPropertyInt(string key, int defaultValue);

        /// <inheritdoc cref="ScintillaGateway.GetLexerLanguage"/>
        string GetLexerLanguage();

        /// <inheritdoc cref="ScintillaGateway.PrivateLexerCall"/>
        IntPtr PrivateLexerCall(int operation, IntPtr pointer);

        /// <inheritdoc cref="ScintillaGateway.PropertyNames"/>
        string PropertyNames();

        /// <inheritdoc cref="ScintillaGateway.PropertyType"/>
        TypeProperty PropertyType(string name);

        /// <inheritdoc cref="ScintillaGateway.DescribeProperty"/>
        unsafe string DescribeProperty(string name);

        /// <inheritdoc cref="ScintillaGateway.DescribeKeyWordSets"/>
        string DescribeKeyWordSets();

        /// <inheritdoc cref="ScintillaGateway.GetLineEndTypesSupported"/>
        LineEndType GetLineEndTypesSupported();

        /// <inheritdoc cref="ScintillaGateway.AllocateSubStyles"/>
        int AllocateSubStyles(int styleBase, int numberStyles);

        /// <inheritdoc cref="ScintillaGateway.GetSubStylesStart"/>
        int GetSubStylesStart(int styleBase);

        /// <inheritdoc cref="ScintillaGateway.GetSubStylesLength"/>
        int GetSubStylesLength(int styleBase);

        /// <inheritdoc cref="ScintillaGateway.GetStyleFromSubStyle"/>
        int GetStyleFromSubStyle(int subStyle);

        /// <inheritdoc cref="ScintillaGateway.GetPrimaryStyleFromStyle"/>
        int GetPrimaryStyleFromStyle(int style);

        /// <inheritdoc cref="ScintillaGateway.FreeSubStyles"/>
        void FreeSubStyles();

        /// <inheritdoc cref="ScintillaGateway.SetIdentifiers"/>
        void SetIdentifiers(int style, string identifiers);

        /// <inheritdoc cref="ScintillaGateway.DistanceToSecondaryStyles"/>
        int DistanceToSecondaryStyles();

        /// <inheritdoc cref="ScintillaGateway.GetSubStyleBases"/>
        string GetSubStyleBases();

        /// <inheritdoc cref="ScintillaGateway.GetNamedStyles"/>
        int GetNamedStyles();

        /// <inheritdoc cref="ScintillaGateway.NameOfStyle"/>
        string NameOfStyle(int style);

        /// <inheritdoc cref="ScintillaGateway.TagsOfStyle"/>
        string TagsOfStyle(int style);

        /// <inheritdoc cref="ScintillaGateway.DescriptionOfStyle"/>
        string DescriptionOfStyle(int style);

        /// <inheritdoc cref="ScintillaGateway.SetILexer"/>
        void SetILexer(IntPtr ilexer);

#if !SCI_DISABLE_PROVISIONAL
        /// <inheritdoc cref="ScintillaGateway.GetBidirectional"/>
        Bidirectional GetBidirectional();
#endif

#if !SCI_DISABLE_PROVISIONAL
        /// <inheritdoc cref="ScintillaGateway.SetBidirectional"/>
        void SetBidirectional(Bidirectional bidirectional);
#endif

        /// <inheritdoc cref="ScintillaGateway.SetStyleBits"/>
        [Obsolete("Scintilla no longer supports style byte indicators: https://www.scintilla.org/ScintillaDoc.html#Indicators")]
        void SetStyleBits(int bits);

        /// <inheritdoc cref="ScintillaGateway.GetStyleBits"/>
        [Obsolete("Scintilla no longer supports style byte indicators: https://www.scintilla.org/ScintillaDoc.html#Indicators")]
        int GetStyleBits();

        /// <inheritdoc cref="ScintillaGateway.GetStyleBitsNeeded"/>
        [Obsolete("Scintilla no longer supports style byte indicators: https://www.scintilla.org/ScintillaDoc.html#Indicators")]
        int GetStyleBitsNeeded();

        /// <inheritdoc cref="ScintillaGateway.SetKeysUnicode"/>
        [Obsolete("See https://www.scintilla.org/ScintillaDoc.html#SCI_SETKEYSUNICODE")]
        void SetKeysUnicode(bool keysUnicode);

        /// <inheritdoc cref="ScintillaGateway.GetKeysUnicode"/>
        [Obsolete("See https://www.scintilla.org/ScintillaDoc.html#SCI_GETKEYSUNICODE")]
        bool GetKeysUnicode();

        /// <inheritdoc cref="ScintillaGateway.GetTwoPhaseDraw"/>
        [Obsolete("See https://www.scintilla.org/ScintillaDoc.html#SCI_GETTWOPHASEDRAW")]
        bool GetTwoPhaseDraw();

        /// <inheritdoc cref="ScintillaGateway.SetTwoPhaseDraw"/>
        [Obsolete("See https://www.scintilla.org/ScintillaDoc.html#SCI_SETTWOPHASEDRAW")]
        void SetTwoPhaseDraw(bool twoPhase);

        /* --Autogenerated -- end of section automatically generated from Scintilla.iface */

        /// <summary>Gets the encoding of the currently active document.</summary>
        System.Text.Encoding CodePage { get; }
        /// <summary>Gets a newline string in the EOL mode of the current document.</summary>
        string LineDelimiter { get; }
    }
}
