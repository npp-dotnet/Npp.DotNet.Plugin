#!/usr/bin/env python3
"""
 SPDX-FileCopyrightText: (c) 2024 Robert Di Pardo
 SPDX-License-Identifier: 0BSD
"""
import os
import re
import subprocess
import sys
import tempfile
from datetime import datetime
from io import StringIO

import utils as u
from get_sci_doc import ScintillaDefinitions, get_resource

OUTPUT=os.path.join(os.path.dirname(__file__), '..', 'lib', 'Npp.DotNet.Plugin', 'Kbg.NppPluginNET', 'SciMsgs.cs')
SCINTILLA_H='https://raw.githubusercontent.com/notepad-plus-plus/notepad-plus-plus/master/scintilla/include/Scintilla.h'
VERSION_TXT='https://raw.githubusercontent.com/notepad-plus-plus/notepad-plus-plus/master/scintilla/version.txt'

CS_FILE_START=f"""/*
 * SPDX-FileCopyrightText: {datetime.today().year} {
 u.cmd_output_or_default('git config --get user.name', u.get_current_user)} <{
 u.cmd_output_or_default('git config --get user.email', u.get_hostname, f'{u.get_current_user()}@localhost')}>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

using System;

namespace Npp.DotNet.Plugin
{{
    /// <summary>Definitions for Scintilla {'.'.join(re.findall(r'[0-9]', get_resource(VERSION_TXT)))}</summary>
    /// <remarks>Autogenerated {datetime.today().strftime('%Y-%m-%d')}</remarks>
    public enum SciMsg : uint
    {{
"""

CS_FILE_END="""    }
}
"""

def generate(cpp_header: str):
    """
    Extract definitions from a Scintilla header and write them to a new C# source file.
    """
    try:
        if not os.path.exists(cpp_header):
            with open(cpp_header, 'w', encoding='utf-8') as cpp_msgs:
                cpp_msgs.write(get_resource(SCINTILLA_H))

        docs = ScintillaDefinitions()
        out = StringIO()
        skip = True

        print(CS_FILE_START, end='', file=out)

        with open(cpp_header, 'r', encoding='utf-8') as hdr:
            for line in hdr.read().splitlines():
                if skip and not bool(re.search(r'\+\+Autogenerated', line)):
                    continue

                if bool(re.search(r'\-\-Autogenerated', line)):
                    break

                skip = False

                try:
                    macro = re.match(r'^#(if|end)(n?def|if)', line)
                    if macro is not None:
                        print(u.c_preproc_to_csharp(line, macro), file=out)
                    elif re.search(r'^\s*(?!\/\/\s*)#define', line):
                        decl = re.sub(r'\-1$', '0xFFFFFFFF', line).split()
                        if len(decl) == 3:
                            sym = decl[1].upper()
                            comment = docs.describe(sym)
                            if bool(comment):
                                print(comment, file=out)

                            print(f"{docs.style.indent}{decl[1]} = {decl[2]},", file=out)

                except (IndexError, AttributeError):
                    pass

        print(CS_FILE_END, end='', file=out)

        with open(OUTPUT, 'w', encoding='utf-8') as cs_msgs:
            cs_msgs.write(out.getvalue())

        subprocess.run(['unix2dos', '-k', '-m', '-u', OUTPUT], check=True, encoding='utf-8')

    except (subprocess.CalledProcessError, IOError) as err:
        print(str(err), file=sys.stderr)

    finally:
        out.close()

# -------------------------------------------------------------------
if __name__ == '__main__':
    generate(os.path.realpath(sys.argv[1]) if len(sys.argv) > 1 \
        else os.path.join(tempfile.gettempdir(), 'Scintilla.h'))
